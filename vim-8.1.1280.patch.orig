commit 25c9c680ec4dfbb51f4ef21c3460a48d3c67ffc8
Author: Bram Moolenaar <Bram@vim.org>
Date:   Sun May 5 18:13:34 2019 +0200

    patch 8.1.1280: remarks about functionality not in Vi clutters the help
    
    Problem:    Remarks about functionality not in Vi clutters the help.
    Solution:   Move all info about what is new in Vim or already existed in Vi to
                vi_diff.txt.  Remove {not in Vi} remarks. (closes #4268) Add
                "noet" to the help files modeline.  Also include many other help
                file improvements.

diff --git a/runtime/doc/arabic.txt b/runtime/doc/arabic.txt
index 2303a2b86..b3b61a134 100644
--- a/runtime/doc/arabic.txt
+++ b/runtime/doc/arabic.txt

 
 
 		  VIM REFERENCE MANUAL	  by Nadim Shaikli
 
 
 Arabic Language support (options & mappings) for Vim		*Arabic*
 
-{Vi does not have any of these commands}
 
 								*E800*
 In order to use right-to-left and Arabic mapping support, it is
 necessary to compile Vim with the |+arabic| feature.
 
diff --git a/runtime/doc/autocmd.txt b/runtime/doc/autocmd.txt
index 5d60fbeea..01d718f1f 100644
--- a/runtime/doc/autocmd.txt
+++ b/runtime/doc/autocmd.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -18,11 +18,10 @@ For a basic explanation, see section |40.3| in the user manual.
 8.  Groups			|autocmd-groups|
 9.  Executing autocommands	|autocmd-execute|
 10. Using autocommands		|autocmd-use|
 11. Disabling autocommands	|autocmd-disable|
 
-{Vi does not have any of these commands}
 
 ==============================================================================
 1. Introduction						*autocmd-intro*
 
 You can specify commands to be executed automatically when reading or writing
diff --git a/runtime/doc/change.txt b/runtime/doc/change.txt
index 4c5b402a7..a904aec38 100644
--- a/runtime/doc/change.txt
+++ b/runtime/doc/change.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -32,11 +32,11 @@ For inserting text see |insert.txt|.
 			"dl".
 			The <Del> key does not take a [count].  Instead, it
 			deletes the last character of the count.
 			See |:fixdel| if the <Del> key does not do what you
 			want.  See |'whichwrap'| for deleting a line break
-			(join lines).  {Vi does not support <Del>}
+			(join lines).
 
 							*X* *dh*
 ["x]X			Delete [count] characters before the cursor [into
 			register x] (not |linewise|).  Does the same as "dh".
 			Also see |'whichwrap'|.
@@ -57,21 +57,21 @@ For inserting text see |insert.txt|.
 			ignored.
 
 {Visual}["x]x	or					*v_x* *v_d* *v_<Del>*
 {Visual}["x]d   or
 {Visual}["x]<Del>	Delete the highlighted text [into register x] (for
-			{Visual} see |Visual-mode|).  {not in Vi}
+			{Visual} see |Visual-mode|).
 
 {Visual}["x]CTRL-H   or					*v_CTRL-H* *v_<BS>*
 {Visual}["x]<BS>	When in Select mode: Delete the highlighted text [into
 			register x].
 
 {Visual}["x]X	or					*v_X* *v_D* *v_b_D*
 {Visual}["x]D		Delete the highlighted lines [into register x] (for
 			{Visual} see |Visual-mode|).  In Visual block mode,
 			"D" deletes the highlighted text plus all text until
-			the end of the line.  {not in Vi}
+			the end of the line.
 
 					*:d* *:de* *:del* *:delete* *:dl* *:dp*
 :[range]d[elete] [x]	Delete [range] lines (default: current line) [into
 			register x].
 			Note these weird abbreviations:
@@ -114,37 +114,34 @@ J			Join [count] lines, with a minimum of two lines.
 			lines available.
 
 							*v_J*
 {Visual}J		Join the highlighted lines, with a minimum of two
 			lines.  Remove the indent and insert up to two spaces
-			(see below).  {not in Vi}
+			(see below).
 
 							*gJ*
 gJ			Join [count] lines, with a minimum of two lines.
-			Don't insert or remove any spaces.  {not in Vi}
+			Don't insert or remove any spaces.
 
 							*v_gJ*
 {Visual}gJ		Join the highlighted lines, with a minimum of two
-			lines.  Don't insert or remove any spaces.  {not in
-			Vi}
+			lines.  Don't insert or remove any spaces.
 
 							*:j* *:join*
 :[range]j[oin][!] [flags]
 			Join [range] lines.  Same as "J", except with [!]
 			the join does not insert or delete any spaces.
 			If a [range] has equal start and end values, this
 			command does nothing.  The default behavior is to
 			join the current line with the line below it.
-			{not in Vi: !}
 			See |ex-flags| for [flags].
 
 :[range]j[oin][!] {count} [flags]
 			Join {count} lines, starting with [range] (default:
 			current line |cmdline-ranges|).  Same as "J", except
 			with [!] the join does not insert or delete any
 			spaces.
-			{not in Vi: !}
 			See |ex-flags| for [flags].
 
 These commands delete the <EOL> between lines.  This has the effect of joining
 multiple lines into one line.  You can repeat these commands (except `:j`) and
 undo them.
@@ -207,27 +204,25 @@ gR			Enter Virtual Replace mode: Each character you type
 ["x]S			Delete [count] lines [into register x] and start
 			insert.  Synonym for "cc" |linewise|.
 
 {Visual}["x]c	or					*v_c* *v_s*
 {Visual}["x]s		Delete the highlighted text [into register x] and
-			start insert (for {Visual} see |Visual-mode|).  {not
-			in Vi}
+			start insert (for {Visual} see |Visual-mode|).
 
 							*v_r*
 {Visual}["x]r{char}	Replace all selected characters by {char}.
 
 							*v_C*
 {Visual}["x]C		Delete the highlighted lines [into register x] and
 			start insert.  In Visual block mode it works
-			differently |v_b_C|.  {not in Vi}
+			differently |v_b_C|.
 							*v_S*
 {Visual}["x]S		Delete the highlighted lines [into register x] and
-			start insert (for {Visual} see |Visual-mode|).  {not
-			in Vi}
+			start insert (for {Visual} see |Visual-mode|).
 							*v_R*
 {Visual}["x]R		Currently just like {Visual}["x]S.  In a next version
-			it might work differently. {not in Vi}
+			it might work differently.
 
 Notes:
 - You can end Insert and Replace mode with <Esc>.
 - See the section "Insert and Replace mode" |mode-ins-repl| for the other
   special characters in these modes.
@@ -320,75 +315,75 @@ The following commands change the case of letters.  The currently active
 
 ~{motion}		'tildeop' option: switch case of {motion} text. {Vi:
 			tilde cannot be used as an operator}
 
 							*g~*
-g~{motion}		Switch case of {motion} text. {not in Vi}
+g~{motion}		Switch case of {motion} text.
 
 g~g~							*g~g~* *g~~*
-g~~			Switch case of current line. {not in Vi}.
+g~~			Switch case of current line.
 
 							*v_~*
 {Visual}~		Switch case of highlighted text (for {Visual} see
-			|Visual-mode|). {not in Vi}
+			|Visual-mode|).
 
 							*v_U*
 {Visual}U		Make highlighted text uppercase (for {Visual} see
-			|Visual-mode|). {not in Vi}
+			|Visual-mode|).
 
 							*gU* *uppercase*
-gU{motion}		Make {motion} text uppercase. {not in Vi}
+gU{motion}		Make {motion} text uppercase.
 			Example: >
 				:map! <C-F> <Esc>gUiw`]a
 <			This works in Insert mode: press CTRL-F to make the
 			word before the cursor uppercase.  Handy to type
 			words in lowercase and then make them uppercase.
 
 
 gUgU							*gUgU* *gUU*
-gUU			Make current line uppercase. {not in Vi}.
+gUU			Make current line uppercase.
 
 							*v_u*
 {Visual}u		Make highlighted text lowercase (for {Visual} see
-			|Visual-mode|).  {not in Vi}
+			|Visual-mode|).
 
 							*gu* *lowercase*
-gu{motion}		Make {motion} text lowercase. {not in Vi}
+gu{motion}		Make {motion} text lowercase.
 
 gugu							*gugu* *guu*
-guu			Make current line lowercase. {not in Vi}.
+guu			Make current line lowercase.
 
 							*g?* *rot13*
-g?{motion}		Rot13 encode {motion} text. {not in Vi}
+g?{motion}		Rot13 encode {motion} text.
 
 							*v_g?*
 {Visual}g?		Rot13 encode the highlighted text (for {Visual} see
-			|Visual-mode|).  {not in Vi}
+			|Visual-mode|).
 
 g?g?							*g?g?* *g??*
-g??			Rot13 encode current line. {not in Vi}.
+g??			Rot13 encode current line.
 
 To turn one line into title caps, make every first letter of a word
 uppercase: >
 	:s/\v<(.)(\w*)/\u\1\L\2/g
 
 
 Adding and subtracting ~
 							*CTRL-A*
 CTRL-A			Add [count] to the number or alphabetic character at
-			or after the cursor.  {not in Vi}
+			or after the cursor.
 
 							*v_CTRL-A*
 {Visual}CTRL-A		Add [count] to the number or alphabetic character in
-			the highlighted text.  {not in Vi}
+			the highlighted text.
 
 							*v_g_CTRL-A*
 {Visual}g CTRL-A	Add [count] to the number or alphabetic character in
 			the highlighted text. If several lines are
 		        highlighted, each one will be incremented by an
 			additional [count] (so effectively creating a
-			[count] incrementing sequence).  {not in Vi}
+			[count] incrementing sequence).
 			For Example, if you have this list of numbers:
 				1. ~
 				1. ~
 				1. ~
 				1. ~
@@ -399,15 +394,15 @@ CTRL-A			Add [count] to the number or alphabetic character at
 				3. ~
 				4. ~
 
 							*CTRL-X*
 CTRL-X			Subtract [count] from the number or alphabetic
-			character at or after the cursor.  {not in Vi}
+			character at or after the cursor.
 
 							*v_CTRL-X*
 {Visual}CTRL-X		Subtract [count] from the number or alphabetic
-			character in the highlighted text.  {not in Vi}
+			character in the highlighted text.
 
 			On MS-Windows, this is mapped to cut Visual text
 			|dos-standard-mappings|.  If you want to disable the
 			mapping, use this: >
 				silent! vunmap <C-X>
@@ -415,11 +410,11 @@ CTRL-X			Subtract [count] from the number or alphabetic
 							*v_g_CTRL-X*
 {Visual}g CTRL-X	Subtract [count] from the number or alphabetic
 			character in the highlighted text. If several lines
 			are highlighted, each value will be decremented by an
 			additional [count] (so effectively creating a [count]
-			decrementing sequence).  {not in Vi}
+			decrementing sequence).
 
 The CTRL-A and CTRL-X commands can work for:
 - signed and unsigned decimal numbers
 - unsigned binary, octal and hexadecimal numbers
 - alphabetic characters
@@ -483,12 +478,11 @@ SHIFTING LINES LEFT OR RIGHT				*shift-left-right*
 							*<<*
 <<			Shift [count] lines one 'shiftwidth' leftwards.
 
 							*v_<*
 {Visual}[count]<	Shift the highlighted lines [count] 'shiftwidth'
-			leftwards (for {Visual} see |Visual-mode|).  {not in
-			Vi}
+			leftwards (for {Visual} see |Visual-mode|).
 
 							*>*
  >{motion}		Shift {motion} lines one 'shiftwidth' rightwards.
 
 			If the 'vartabstop' feature is enabled, and the
@@ -498,23 +492,22 @@ SHIFTING LINES LEFT OR RIGHT				*shift-left-right*
 							*>>*
  >>			Shift [count] lines one 'shiftwidth' rightwards.
 
 							*v_>*
 {Visual}[count]>	Shift the highlighted lines [count] 'shiftwidth'
-			rightwards (for {Visual} see |Visual-mode|).  {not in
-			Vi}
+			rightwards (for {Visual} see |Visual-mode|).
 
 							*:<*
 :[range]<		Shift [range] lines one 'shiftwidth' left.  Repeat '<'
 			for shifting multiple 'shiftwidth's.
 
 :[range]< {count}	Shift {count} lines one 'shiftwidth' left, starting
 			with [range] (default current line |cmdline-ranges|).
 			Repeat '<' for shifting multiple 'shiftwidth's.
 
 :[range]le[ft] [indent]	left align lines in [range].  Sets the indent in the
-			lines to [indent] (default 0).  {not in Vi}
+			lines to [indent] (default 0).
 
 							*:>*
 :[range]> [flags]	Shift {count} [range] lines one 'shiftwidth' right.
 			Repeat '>' for shifting multiple 'shiftwidth's.
 			See |ex-flags| for [flags].
@@ -577,11 +570,10 @@ comment (starting with '"') after the `:!` command.
 			{filter}.
 
 							*v_!*
 {Visual}!{filter}	Filter the highlighted lines through the external
 			program {filter} (for {Visual} see |Visual-mode|).
-			{not in Vi}
 
 :{range}![!]{filter} [!][arg]				*:range!*
 			Filter {range} lines through the external program
 			{filter}.  Vim replaces the optional bangs with the
 			latest given command and appends the optional [arg].
@@ -611,11 +603,10 @@ comment (starting with '"') after the `:!` command.
 							*==*
 ==			Filter [count] lines like with ={motion}.
 
 							*v_=*
 {Visual}=		Filter the highlighted lines like with ={motion}.
-			{not in Vi}
 
 
 						*tempfile* *setuid*
 Vim uses temporary files for filtering, generating diffs and also for
 tempname().  For Unix, the file will be in a private directory (only
@@ -676,47 +667,43 @@ For other systems the tmpnam() library function is used.
 g&			Synonym for `:%s//~/&` (repeat last substitute with
 			last search pattern on all lines with the same flags).
 			For example, when you first do a substitution with
 			`:s/pattern/repl/flags` and then `/search` for
 			something else, `g&` will do `:%s/search/repl/flags`.
-			Mnemonic: global substitute. {not in Vi}
+			Mnemonic: global substitute.
 
 						*:snomagic* *:sno*
 :[range]sno[magic] ...	Same as `:substitute`, but always use 'nomagic'.
-			{not in Vi}
 
 						*:smagic* *:sm*
 :[range]sm[agic] ...	Same as `:substitute`, but always use 'magic'.
-			{not in Vi}
 
 							*:s_flags*
 The flags that you can use for the substitute commands:
 
 							*:&&*
 [&]	Must be the first one: Keep the flags from the previous substitute
 	command.  Examples: >
 		:&&
 		:s/this/that/&
 <	Note that `:s` and `:&` don't keep the flags.
-	{not in Vi}
 
 [c]	Confirm each substitution.  Vim highlights the matching string (with
 	|hl-IncSearch|).  You can type:				*:s_c*
 	    'y'	    to substitute this match
 	    'l'	    to substitute this match and then quit ("last")
 	    'n'	    to skip this match
 	    <Esc>   to quit substituting
-	    'a'	    to substitute this and all remaining matches {not in Vi}
-	    'q'	    to quit substituting {not in Vi}
-	    CTRL-E  to scroll the screen up {not in Vi, not available when
-			compiled without the |+insert_expand| feature}
-	    CTRL-Y  to scroll the screen down {not in Vi, not available when
-			compiled without the |+insert_expand| feature}
+	    'a'	    to substitute this and all remaining matches
+	    'q'	    to quit substituting
+	    CTRL-E  to scroll the screen up {not available when compiled
+		       without the |+insert_expand| feature}
+	    CTRL-Y  to scroll the screen down {not available when compiled
+		       without the |+insert_expand| feature}
 	If the 'edcompatible' option is on, Vim remembers the [c] flag and
 	toggles it each time you use it, but resets it when you give a new
 	search pattern.
-	{not in Vi: highlighting of the match, other responses than 'y' or 'n'}
 
 							*:s_e*
 [e]     When the search pattern fails, do not issue an error message and, in
 	particular, continue in maps as if no error occurred.  This is most
 	useful to prevent the "No match" error from breaking a mapping.  Vim
@@ -724,11 +711,10 @@ The flags that you can use for the substitute commands:
 		Regular expressions can't be delimited by letters
 		\ should be followed by /, ? or &
 		No previous substitute regular expression
 		Trailing characters
 		Interrupted
-	{not in Vi}
 
 							*:s_g*
 [g]	Replace all occurrences in the line.  Without this argument,
 	replacement occurs only for the first occurrence in each line.  If
 	the 'edcompatible' option is on, Vim remembers this flag and toggles
@@ -737,16 +723,14 @@ The flags that you can use for the substitute commands:
 	and the [g] argument switches it off.
 
 							*:s_i*
 [i]	Ignore case for the pattern.  The 'ignorecase' and 'smartcase' options
 	are not used.
-	{not in Vi}
 
 							*:s_I*
 [I]	Don't ignore case for the pattern.  The 'ignorecase' and 'smartcase'
 	options are not used.
-	{not in Vi}
 
 							*:s_n*
 [n]	Report the number of matches, do not actually substitute.  The [c]
 	flag is ignored.  The matches are reported as if 'report' is zero.
 	Useful to |count-items|.
@@ -774,11 +758,10 @@ The flags that you can use for the substitute commands:
 <	The last commands will replace "green" with "red". >
 		:s/blue/red/
 		/green
 		:&
 <	The last command will replace "blue" with "red".
-	{not in Vi}
 
 Note that there is no flag to change the "magicness" of the pattern.  A
 different command is used instead, or you can use |/\v| and friends.  The
 reason is that the flags can only be found by skipping the pattern, and in
 order to skip the pattern the "magicness" must be known.  Catch 22!
@@ -1000,11 +983,10 @@ This replaces each 'E' character with a euro sign.  Read more in |<Char->|.
 			If the |+vartabs| feature is enabled then a list of
 			tab widths separated by commas may be used in place of
 			a single tabstop.  Each value in the list represents
 			the width of one tabstop, except the final value which
 			applies to all following tabstops.
-			{not in Vi}
 
 							*retab-example*
 Example for using autocommands and ":retab" to edit a file which is stored
 with tabstops at 8 but edited with tabstops set at 4.  Warning: white space
 inside of strings can change!  Also see 'softtabstop' option. >
@@ -1024,21 +1006,20 @@ inside of strings can change!  Also see 'softtabstop' option. >
 
 							*:reg* *:registers*
 :reg[isters]		Display the contents of all numbered and named
 			registers.  If a register is written to for |:redir|
 			it will not be listed.
-			{not in Vi}
 
 
 :reg[isters] {arg}	Display the contents of the numbered and named
 			registers that are mentioned in {arg}.  For example: >
 				:reg 1a
 <			to display registers '1' and 'a'.  Spaces are allowed
-			in {arg}.  {not in Vi}
+			in {arg}.
 
 							*:di* *:display*
-:di[splay] [arg]	Same as :registers.  {not in Vi}
+:di[splay] [arg]	Same as :registers.
 
 							*y* *yank*
 ["x]y{motion}		Yank {motion} text [into register x].  When no
 			characters are to be yanked (e.g., "y0" in column 1),
 			this is an error when 'cpoptions' includes the 'E'
@@ -1053,15 +1034,15 @@ inside of strings can change!  Also see 'softtabstop' option. >
 			cursor to the end of line (which is more logical,
 			but not Vi-compatible) use ":map Y y$".
 
 							*v_y*
 {Visual}["x]y		Yank the highlighted text [into register x] (for
-			{Visual} see |Visual-mode|).  {not in Vi}
+			{Visual} see |Visual-mode|).
 
 							*v_Y*
 {Visual}["x]Y		Yank the highlighted lines [into register x] (for
-			{Visual} see |Visual-mode|).  {not in Vi}
+			{Visual} see |Visual-mode|).
 
 							*:y* *:yank* *E850*
 :[range]y[ank] [x]	Yank [range] lines [into register x]. Yanking to the
 			"* or "+ registers is possible only when the
 			|+clipboard| feature is included.
@@ -1084,26 +1065,25 @@ inside of strings can change!  Also see 'softtabstop' option. >
 			times.  Uses the "* register, unless another is
 			specified.
 			Leaves the cursor at the end of the new text.
 			Using the mouse only works when 'mouse' contains 'n'
 			or 'a'.
-			{not in Vi}
 			If you have a scrollwheel and often accidentally paste
 			text, you can use these mappings to disable the
 			pasting with the middle mouse button: >
 				:map <MiddleMouse> <Nop>
 				:imap <MiddleMouse> <Nop>
 <			You might want to disable the multi-click versions
 			too, see |double-click|.
 
 							*gp*
 ["x]gp			Just like "p", but leave the cursor just after the new
-			text.  {not in Vi}
+			text.
 
 							*gP*
 ["x]gP			Just like "P", but leave the cursor just after the new
-			text.  {not in Vi}
+			text.
 
 							*:pu* *:put*
 :[line]pu[t] [x]	Put the text [from register x] after [line] (default
 			current line).  This always works |linewise|, thus
 			this command can be used to put a yanked block as new
@@ -1127,18 +1107,18 @@ inside of strings can change!  Also see 'softtabstop' option. >
 			current line).
 
 ["x]]p		    or					*]p* *]<MiddleMouse>*
 ["x]]<MiddleMouse>	Like "p", but adjust the indent to the current line.
 			Using the mouse only works when 'mouse' contains 'n'
-			or 'a'.  {not in Vi}
+			or 'a'.
 
 ["x][P		    or					*[P*
 ["x]]P		    or					*]P*
 ["x][p		    or					*[p* *[<MiddleMouse>*
 ["x][<MiddleMouse>	Like "P", but adjust the indent to the current line.
 			Using the mouse only works when 'mouse' contains 'n'
-			or 'a'.  {not in Vi}
+			or 'a'.
 
 You can use these commands to copy text from one place to another.  Do this
 by first getting the text into a register with a yank, delete or change
 command, then inserting the register contents with a put command.  You can
 also use these commands to move text from one file to another, because Vim
@@ -1244,21 +1224,20 @@ contents of register 9.
 not exist}
 
 3. Small delete register "-				*quote_-* *quote-*
 This register contains text from commands that delete less than one line,
 except when the command specifies a register with ["x].
-{not in Vi}
 
 4. Named registers "a to "z or "A to "Z			*quote_alpha* *quotea*
 Vim fills these registers only when you say so.  Specify them as lowercase
 letters to replace their previous contents or as uppercase letters to append
 to their previous contents.  When the '>' flag is present in 'cpoptions' then
 a line break is inserted before the appended text.
 
 5. Read-only registers ":, ". and "%
 These are '%', '#', ':' and '.'.  You can use them only with the "p", "P",
-and ":put" commands and with CTRL-R.  {not in Vi}
+and ":put" commands and with CTRL-R.
 						*quote_.* *quote.* *E29*
 	".	Contains the last inserted text (the same as what is inserted
 		with the insert mode commands CTRL-A and CTRL-@).  Note: this
 		doesn't work with CTRL-R on the command-line.  It works a bit
 		differently, like inserting the text instead of putting it
@@ -1308,47 +1287,46 @@ Float it's converted into a String.  If the result is a List each element is
 turned into a String and used as a line.  A Dictionary or FuncRef results in
 an error message (use string() to convert).
 
 If the "= register is used for the "p" command, the String is split up at <NL>
 characters.  If the String ends in a <NL>, it is regarded as a linewise
-register.  {not in Vi}
+register.
 
 8. Selection and drop registers "*, "+ and "~ 
 Use these registers for storing and retrieving the selected text for the GUI.
 See |quotestar| and |quoteplus|.  When the clipboard is not available or not
 working, the unnamed register is used instead.  For Unix systems the clipboard
-is only available when the |+xterm_clipboard| feature is present.  {not in Vi}
+is only available when the |+xterm_clipboard| feature is present.
 
 Note that there is only a distinction between "* and "+ for X11 systems.  For
 an explanation of the difference, see |x11-selection|.  Under MS-Windows, use
 of "* and "+ is actually synonymous and refers to the |gui-clipboard|.
 
 						*quote_~* *quote~* *<Drop>*
 The read-only "~ register stores the dropped text from the last drag'n'drop
 operation.  When something has been dropped onto Vim, the "~ register is
 filled in and the <Drop> pseudo key is sent for notification.  You can remap
 this key if you want; the default action (for all modes) is to insert the
-contents of the "~ register at the cursor position.  {not in Vi}
+contents of the "~ register at the cursor position.
 {only available when compiled with the |+dnd| feature, currently only with the
 GTK GUI}
 
 Note: The "~ register is only used when dropping plain text onto Vim.
 Drag'n'drop of URI lists is handled internally.
 
 9. Black hole register "_				*quote_*
 When writing to this register, nothing happens.  This can be used to delete
 text without affecting the normal registers.  When reading from this register,
-nothing is returned.  {not in Vi}
+nothing is returned.
 
 10. Last search pattern register	"/			*quote_/* *quote/*
 Contains the most recent search-pattern.  This is used for "n" and 'hlsearch'.
 It is writable with `:let`, you can change it to have 'hlsearch' highlight
 other matches without actually searching.  You can't yank or delete into this
 register.  The search direction is available in |v:searchforward|.
 Note that the value is restored when returning from a function
 |function-search-undo|.
-{not in Vi}
 
 							*@/*
 You can write to a register with a `:let` command |:let-@|.  Example: >
 	:let @/ = "the"
 
@@ -1375,21 +1353,19 @@ The next three commands always work on whole lines.
 6. Formatting text					*formatting*
 
 :[range]ce[nter] [width]				*:ce* *:center*
 			Center lines in [range] between [width] columns
 			(default 'textwidth' or 80 when 'textwidth' is 0).
-			{not in Vi}
 
 :[range]ri[ght] [width]					*:ri* *:right*
 			Right-align lines in [range] at [width] columns
 			(default 'textwidth' or 80 when 'textwidth' is 0).
-			{not in Vi}
 
 							*:le* *:left*
 :[range]le[ft] [indent]
 			Left-align lines in [range].  Sets the indent in the
-			lines to [indent] (default 0).  {not in Vi}
+			lines to [indent] (default 0).
 
 							*gq*
 gq{motion}		Format the lines that {motion} moves over.
 			Formatting is done with one of three methods:
 			1. If 'formatexpr' is not empty the expression is
@@ -1412,28 +1388,28 @@ gq{motion}		Format the lines that {motion} moves over.
 			formatting, use this mapping: >
 				:nnoremap Q gq
 
 gqgq							*gqgq* *gqq*
 gqq			Format the current line.  With a count format that
-			many lines.  {not in Vi}
+			many lines.
 
 							*v_gq*
 {Visual}gq		Format the highlighted text.  (for {Visual} see
-			|Visual-mode|).  {not in Vi}
+			|Visual-mode|).
 
 							*gw*
 gw{motion}		Format the lines that {motion} moves over.  Similar to
 			|gq| but puts the cursor back at the same position in
 			the text.  However, 'formatprg' and 'formatexpr' are
-			not used.  {not in Vi}
+			not used.
 
 gwgw							*gwgw* *gww*
-gww			Format the current line as with "gw".  {not in Vi}
+gww			Format the current line as with "gw".
 
 							*v_gw*
 {Visual}gw		Format the highlighted text as with "gw".  (for
-			{Visual} see |Visual-mode|).  {not in Vi}
+			{Visual} see |Visual-mode|).
 
 Example: To format the current paragraph use:			*gqap*  >
 	gqap
 
 The "gq" command leaves the cursor in the line where the motion command takes
diff --git a/runtime/doc/cmdline.txt b/runtime/doc/cmdline.txt
index e229532ac..ed085ef62 100644
--- a/runtime/doc/cmdline.txt
+++ b/runtime/doc/cmdline.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -64,11 +64,10 @@ Notes:
 - Only commands that are typed are remembered.  Ones that completely come from
   mappings are not put in the history.
 - All searches are put in the search history, including the ones that come
   from commands like "*" and "#".  But for a mapping, only the last search is
   remembered (to avoid that long mappings trash the history).
-{Vi: no history}
 {not available when compiled without the |+cmdline_hist| feature}
 
 There is an automatic completion of names on the command-line; see
 |cmdline-completion|.
 
@@ -122,16 +121,16 @@ CTRL-U		Remove all characters between the cursor position and
 		deleted all characters on the line.  If that is the
 		preferred behavior, add the following to your .vimrc: >
 			:cnoremap <C-U> <C-E><C-U>
 <
 						*c_<Insert>* *c_Insert*
-<Insert>	Toggle between insert and overstrike.  {not in Vi}
+<Insert>	Toggle between insert and overstrike.
 
 {char1} <BS> {char2}	or				*c_digraph*
 CTRL-K {char1} {char2}					*c_CTRL-K*
 		enter digraph (see |digraphs|).  When {char1} is a special
-		key, the code for that key is inserted in <> form.  {not in Vi}
+		key, the code for that key is inserted in <> form.
 
 CTRL-R {0-9a-z"%#:-=.}					*c_CTRL-R* *c_<C-R>*
 		Insert the contents of a numbered or named register.  Between
 		typing CTRL-R and the second character '"' will be displayed
 		to indicate that you are expected to enter the name of a
@@ -163,11 +162,11 @@ CTRL-R {0-9a-z"%#:-=.}					*c_CTRL-R* *c_<C-R>*
 				When the result is a |List| the items are used
 				as lines.  They can have line breaks inside
 				too.
 				When the result is a Float it's automatically
 				converted to a String.
-		See |registers| about registers.  {not in Vi}
+		See |registers| about registers.
 		Implementation detail: When using the |expression| register
 		and invoking setcmdpos(), this sets the position before
 		inserting the resulting string.  Use CTRL-R CTRL-R to set the
 		position afterwards.
 
@@ -186,11 +185,10 @@ CTRL-R CTRL-L				*c_CTRL-R_CTRL-L* *c_<C-R>_<C-L>*
 
 		When 'incsearch' is set the cursor position at the end of the
 		currently displayed match is used.  With CTRL-W the part of
 		the word that was already typed is not inserted again.
 
-		{not in Vi}
 		CTRL-F and CTRL-P: {only when |+file_in_path| feature is
 		included}
 
 					*c_CTRL-R_CTRL-R* *c_<C-R>_<C-R>*
 					*c_CTRL-R_CTRL-O* *c_<C-R>_<C-O>*
@@ -311,15 +309,13 @@ CTRL-^		Toggle the use of language |:lmap| mappings and/or Input
 		'keymap' option can be used to install a whole number of them.
 		When entering a command line, langmap mappings are switched
 		off, since you are expected to type a command.  After
 		switching it on with CTRL-^, the new state is not used again
 		for the next command or Search pattern.
-		{not in Vi}
 
 						*c_CTRL-]*
-CTRL-]		Trigger abbreviation, without inserting a character.  {not in
-		Vi}
+CTRL-]		Trigger abbreviation, without inserting a character.
 
 For Emacs-style editing on the command-line see |emacs-keys|.
 
 The <Up> and <Down> keys take the current command-line as a search string.
 The beginning of the next/previous command-lines are compared with this
@@ -330,11 +326,10 @@ The same could be done by typing <S-Up> a number of times until the desired
 command-line is shown.  (Note: the shifted arrow keys do not work on all
 terminals)
 
 							*:his* *:history*
 :his[tory]	Print the history of last entered commands.
-		{not in Vi}
 		{not available when compiled without the |+cmdline_hist|
 		feature}
 
 :his[tory] [{name}] [{first}][, [{last}]]
 		List the contents of history {name} which can be:
@@ -342,11 +337,10 @@ terminals)
 		s[earch] or / or ?	search string history
 		e[xpr]	 or =		expression register history
 		i[nput]	 or @		input line history
 		d[ebug]	 or >		debug command history
 		a[ll]			all of the above
-		{not in Vi}
 
 		If the numbers {first} and/or {last} are given, the respective
 		range of entries from a history is listed.  These numbers can
 		be specified in the following form:
 							*:history-indexing*
diff --git a/runtime/doc/debugger.txt b/runtime/doc/debugger.txt
index 3370cf098..cbf2009a5 100644
--- a/runtime/doc/debugger.txt
+++ b/runtime/doc/debugger.txt

 
 
 		  VIM REFERENCE MANUAL    by Gordon Prieur
 
 
@@ -8,11 +8,10 @@ Debugger Support Features				*debugger-support*
 
 1. Debugger Features		|debugger-features|
 2. Vim Compile Options		|debugger-compilation|
 3. Integrated Debuggers		|debugger-integration|
 
-{Vi does not have any of these features}
 
 ==============================================================================
 1. Debugger Features					*debugger-features*
 
 The following features are available for an integration with a debugger or
diff --git a/runtime/doc/diff.txt b/runtime/doc/diff.txt
index 6b638fae3..60ebb4fa6 100644
--- a/runtime/doc/diff.txt
+++ b/runtime/doc/diff.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -14,12 +14,10 @@ The basics are explained in section |08.7| of the user manual.
 2. Viewing diffs		|view-diffs|
 3. Jumping to diffs		|jumpto-diffs|
 4. Copying diffs		|copy-diffs|
 5. Diff options			|diff-options|
 
-{not in Vi}
-
 ==============================================================================
 1. Starting diff mode					*start-vimdiff*
 
 The easiest way to start editing in diff mode is with the "vimdiff" command.
 This starts Vim as usual, and additionally sets up for viewing the differences
diff --git a/runtime/doc/digraph.txt b/runtime/doc/digraph.txt
index a174d3cfc..b87dc0d8e 100644
--- a/runtime/doc/digraph.txt
+++ b/runtime/doc/digraph.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -16,11 +16,10 @@ An alternative is using the 'keymap' option.
 
 1. Defining digraphs	|digraphs-define|
 2. Using digraphs	|digraphs-use|
 3. Default digraphs	|digraphs-default|
 
-{Vi does not have any of these commands}
 
 ==============================================================================
 1. Defining digraphs					*digraphs-define*
 
 						*:dig* *:digraphs*
diff --git a/runtime/doc/editing.txt b/runtime/doc/editing.txt
index 60ac959b5..4d01e49a1 100644
--- a/runtime/doc/editing.txt
+++ b/runtime/doc/editing.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -42,11 +42,11 @@ An alternate file name is remembered for each window.
 
 							*:keepalt* *:keepa*
 :keepalt {cmd}		Execute {cmd} while keeping the current alternate file
 			name.  Note that commands invoked indirectly (e.g.,
 			with a function) may still set the alternate file
-			name.  {not in Vi}
+			name.
 
 All file names are remembered in the buffer list.  When you enter a file name,
 for editing (e.g., with ":e filename") or writing (e.g., with ":w filename"),
 the file name is added to the list.  You can use the buffer list to remember
 which files you edited and to quickly switch from one file to another (e.g.,
@@ -58,18 +58,17 @@ CTRL-G		or				*CTRL-G* *:f* *:fi* *:file*
 :f[ile]			Prints the current file name (as typed, unless ":cd"
 			was used), the cursor position (unless the 'ruler'
 			option is set), and the file status (readonly,
 			modified, read errors, new file).  See the 'shortmess'
 			option about how to make this message shorter.
-			{Vi does not include column number}
 
 :f[ile]!		like |:file|, but don't truncate the name even when
 			'shortmess' indicates this.
 
 {count}CTRL-G		Like CTRL-G, but prints the current file name with
 			full path.  If the count is higher than 1 the current
-			buffer number is also given.  {not in Vi}
+			buffer number is also given.
 
 					*g_CTRL-G* *word-count* *byte-count*
 g CTRL-G		Prints the current position of the cursor in five
 			ways: Column, Line, Word, Character and Byte.  If the
 			number of Characters and Bytes is the same then the
@@ -78,36 +77,32 @@ g CTRL-G		Prints the current position of the cursor in five
 			than one position on the screen (<Tab> or special
 			character), both the "real" column and the screen
 			column are shown, separated with a dash.
 			Also see the 'ruler' option and the |wordcount()|
 			function.
-			{not in Vi}
 
 							*v_g_CTRL-G*
 {Visual}g CTRL-G	Similar to "g CTRL-G", but Word, Character, Line, and
 			Byte counts for the visually selected region are
 			displayed.
 			In Blockwise mode, Column count is also shown.  (For
 			{Visual} see |Visual-mode|.)
-			{not in VI}
 
 							*:file_f*
 :f[ile][!] {name}	Sets the current file name to {name}.  The optional !
 			avoids truncating the message, as with |:file|.
 			If the buffer did have a name, that name becomes the
 			|alternate-file| name.  An unlisted buffer is created
 			to hold the old name.
 							*:0file*
 :0f[ile][!]		Remove the name of the current buffer.  The optional !
-			avoids truncating the message, as with |:file|.  {not
-			in Vi}
+			avoids truncating the message, as with |:file|.
 
 :buffers
 :files
 :ls			List all the currently known file names.  See
-			'windows.txt' |:files| |:buffers| |:ls|.  {not in
-			Vi}
+			'windows.txt' |:files| |:buffers| |:ls|.
 
 Vim will remember the full path name of a file name that you enter.  In most
 cases when the file name is displayed only the name you typed is shown, but
 the full path name is being used if you used the ":cd" command |:cd|.
 
@@ -242,23 +237,21 @@ If you want to keep the changed buffer without saving it, switch on the
 			is set or 'autowriteall' is set and the file can be
 			written.
 			If 'fileformats' is not empty, the first format given
 			will be used for the new buffer.  If 'fileformats' is
 			empty, the 'fileformat' of the current buffer is used.
-			{not in Vi}
 
 							*:ene!* *:enew!*
 :ene[w]!		Edit a new, unnamed buffer.  Discard any changes to
 			the current buffer.
 			Set 'fileformat' like |:enew|.
-			{not in Vi}
 
 							*:fin* *:find*
 :fin[d][!] [++opt] [+cmd] {file}
 			Find {file} in 'path' and then |:edit| it.
-			{not in Vi} {not available when the |+file_in_path|
-			feature was disabled at compile time}
+			{not available when the |+file_in_path| feature was
+			disabled at compile time}
 
 :{count}fin[d][!] [++opt] [+cmd] {file}
 			Just like ":find", but use the {count} match in
 			'path'.  Thus ":2find file" will find the second
 			"file" found in 'path'.  When there are fewer matches
@@ -276,11 +269,11 @@ If you want to keep the changed buffer without saving it, switch on the
 
 							*:vie* *:view*
 :vie[w][!] [++opt] [+cmd] file
 			When used in Ex mode: Leave |Ex-mode|, go back to
 			Normal mode.  Otherwise same as |:edit|, but set
-			'readonly' option for this buffer.  {not in Vi}
+			'readonly' option for this buffer.
 
 							*CTRL-^* *CTRL-6*
 CTRL-^			Edit the alternate file.  Mostly the alternate file is
 			the previously edited file.  This is a quick way to
 			toggle between two files.  It is equivalent to ":e #",
@@ -295,11 +288,10 @@ CTRL-^			Edit the alternate file.  Mostly the alternate file is
 
 {count}CTRL-^		Edit [count]th file in the buffer list (equivalent to
 			":e #[count]").  This is a quick way to switch between
 			files.
 			See |CTRL-^| above for further details.
-			{not in Vi}
 
 [count]]f						*]f* *[f*
 [count][f		Same as "gf".  Deprecated.
 
 							*gf* *E446* *E447*
@@ -329,21 +321,19 @@ CTRL-^			Edit the alternate file.  Mostly the alternate file is
 <			If the name is a hypertext link, that looks like
 			"type://machine/path", you need the |netrw| plugin.
 			For Unix the '~' character is expanded, like in
 			"~user/file".  Environment variables are expanded too
 			|expand-env|.
-			{not in Vi}
 			{not available when the |+file_in_path| feature was
 			disabled at compile time}
 
 							*v_gf*
 {Visual}[count]gf	Same as "gf", but the highlighted text is used as the
 			name of the file to edit.  'isfname' is ignored.
 			Leading blanks are skipped, otherwise all blanks and
 			special characters are included in the file name.
 			(For {Visual} see |Visual-mode|.)
-			{not in VI}
 
 							*gF*
 [count]gF		Same as "gf", except if a number follows the file
 			name, then the cursor is positioned on that line in
 			the file. The file name and the number must be
@@ -635,11 +625,10 @@ list of the current window.
 			[count] is used like with |:argadd|.
 			If the current file cannot be |abandon|ed {name}s will
 			still be added to the argument list, but won't be
 			edited. No check for duplicates is done.
 			Also see |++opt| and |+cmd|.
-			{not in Vi}
 
 :[count]arga[dd] {name} ..			*:arga* *:argadd* *E479*
 :[count]arga[dd]
 			Add the {name}s to the argument list.  When {name} is
 			omitted add the current buffer name to the argument
@@ -657,11 +646,10 @@ list of the current window.
 			And after the last one:
 				:+2argadd y	a b c x y
 			There is no check for duplicates, it is possible to
 			add a file to the argument list twice.
 			The currently edited file is not changed.
-			{not in Vi}
 			Note: you can also use this method: >
 				:args ## x
 <			This will add the "x" item and sort the new list.
 
 :argd[elete] {pattern} ..			*:argd* *:argdelete* *E480*
@@ -671,11 +659,10 @@ list of the current window.
 			current entry.
 			This command keeps the currently edited file, also
 			when it's deleted from the argument list.
 			Example: >
 				:argdel *.obj
-<			{not in Vi}
 
 :[range]argd[elete]	Delete the {range} files from the argument list.
 			Example: >
 				:10,$argdel
 <			Deletes arguments 10 and further, keeping 1-9. >
@@ -686,27 +673,24 @@ list of the current window.
 <			Deletes the current argument. >
 				:%argd
 <			Removes all the files from the arglist.
 			When the last number in the range is too high, up to
 			the last argument is deleted.
-			{not in Vi}
 
 							*:argu* *:argument*
 :[count]argu[ment] [count] [++opt] [+cmd]
 			Edit file [count] in the argument list.  When [count]
 			is omitted the current entry is used.  This fails
 			when changes have been made and Vim does not want to
 			|abandon| the current buffer.
 			Also see |++opt| and |+cmd|.
-			{not in Vi}
 
 :[count]argu[ment]! [count] [++opt] [+cmd]
 			Edit file [count] in the argument list, discard any
 			changes to the current buffer.  When [count] is
 			omitted the current entry is used.
 			Also see |++opt| and |+cmd|.
-			{not in Vi}
 
 :[count]n[ext] [++opt] [+cmd]			*:n* *:ne* *:next* *E165* *E163*
 			Edit [count] next file.  This fails when changes have
 			been made and Vim does not want to |abandon| the
 			current buffer.  Also see |++opt| and |+cmd|.  {Vi: no
@@ -725,11 +709,11 @@ list of the current window.
 
 :[count]N[ext] [count] [++opt] [+cmd]			*:Next* *:N* *E164*
 			Edit [count] previous file in argument list.  This
 			fails when changes have been made and Vim does not
 			want to |abandon| the current buffer.
-			Also see |++opt| and |+cmd|.  {Vi: no count or ++opt}.
+			Also see |++opt| and |+cmd|.
 
 :[count]N[ext]! [count] [++opt] [+cmd]
 			Edit [count] previous file in argument list.  Discard
 			any changes to the buffer.  Also see |++opt| and
 			|+cmd|.  {Vi: no count or ++opt}.
@@ -746,48 +730,47 @@ list of the current window.
 			Also see |++opt| and |+cmd|. {Vi: no ++opt}
 
 :rew[ind]! [++opt] [+cmd]
 			Start editing the first file in the argument list.
 			Discard any changes to the buffer.  Also see |++opt|
-			and |+cmd|. {Vi: no ++opt}
+			and |+cmd|.
 
 							*:fir* *:first*
 :fir[st][!] [++opt] [+cmd]
-			Other name for ":rewind". {not in Vi}
+			Other name for ":rewind".
 
 							*:la* *:last*
 :la[st] [++opt] [+cmd]
 			Start editing the last file in the argument list.
 			This fails when changes have been made and Vim does
 			not want to |abandon| the current buffer.
-			Also see |++opt| and |+cmd|.  {not in Vi}
+			Also see |++opt| and |+cmd|.
 
 :la[st]! [++opt] [+cmd]
 			Start editing the last file in the argument list.
 			Discard any changes to the buffer.  Also see |++opt|
-			and |+cmd|.  {not in Vi}
+			and |+cmd|.
 
 							*:wn* *:wnext*
 :[count]wn[ext] [++opt]
 			Write current file and start editing the [count]
-			next file.  Also see |++opt| and |+cmd|.  {not in Vi}
+			next file.  Also see |++opt| and |+cmd|.
 
 :[count]wn[ext] [++opt] {file}
 			Write current file to {file} and start editing the
 			[count] next file, unless {file} already exists and
 			the 'writeany' option is off.  Also see |++opt| and
-			|+cmd|.  {not in Vi}
+			|+cmd|.
 
 :[count]wn[ext]! [++opt] {file}
 			Write current file to {file} and start editing the
-			[count] next file.  Also see |++opt| and |+cmd|.  {not
-			in Vi}
+			[count] next file.  Also see |++opt| and |+cmd|.
 
 :[count]wN[ext][!] [++opt] [file]		*:wN* *:wNext*
 :[count]wp[revious][!] [++opt] [file]		*:wp* *:wprevious*
 			Same as :wnext, but go to previous file instead of
-			next.  {not in Vi}
+			next.
 
 The [count] in the commands above defaults to one.  For some commands it is
 possible to use two counts.  The last one (rightmost one) is used.
 
 If no [+cmd] argument is present, the cursor is positioned at the last known
@@ -824,12 +807,10 @@ This means that you are position 4 in the argument list, but not editing the
 fourth file in the argument list.  This happens when you do ":e file".
 
 
 LOCAL ARGUMENT LIST
 
-{not in Vi}
-
 							*:arglocal*
 :argl[ocal]		Make a local copy of the global argument list.
 			Doesn't start editing another file.
 
 :argl[ocal][!] [++opt] [+cmd] {arglist}
@@ -876,11 +857,10 @@ USING THE ARGUMENT LIST
 			{cmd} must not change the argument list.
 			Note: While this command is executing, the Syntax
 			autocommand event is disabled by adding it to
 			'eventignore'.  This considerably speeds up editing
 			each file.
-			{not in Vi}
 			Also see |:windo|, |:tabdo|, |:bufdo|, |:cdo|, |:ldo|,
 			|:cfdo| and |:lfdo|
 
 Example: >
 	:args *.c
@@ -968,28 +948,27 @@ slower (but safer).
 			previous name is used for the alternate file name.
 			The [!] is needed to overwrite an existing file.
 			When 'filetype' is empty filetype detection is done
 			with the new name, before the file is written.
 			When the write was successful 'readonly' is reset.
-			{not in Vi}
 
 							*:up* *:update*
 :[range]up[date][!] [++opt] [>>] [file]
 			Like ":write", but only write when the buffer has been
-			modified.  {not in Vi}
+			modified.
 
 
 WRITING WITH MULTIPLE BUFFERS				*buffer-write*
 
 							*:wa* *:wall*
 :wa[ll]			Write all changed buffers.  Buffers without a file
 			name cause an error message.  Buffers which are
-			readonly are not written. {not in Vi}
+			readonly are not written.
 
 :wa[ll]!		Write all changed buffers, even the ones that are
 			readonly.  Buffers without a file name are not
-			written and cause an error message. {not in Vi}
+			written and cause an error message.
 
 
 Vim will warn you if you try to overwrite a file that has been changed
 elsewhere.  See |timestamp|.
 
@@ -1116,11 +1095,11 @@ The names can be in upper- or lowercase.
 			Triggers the |QuitPre| autocommand event.
 			See |CTRL-W_q| for quitting another window.
 
 :conf[irm] q[uit]	Quit, but give prompt when changes have been made, or
 			the last file in the argument list has not been
-			edited.  See |:confirm| and 'confirm'.  {not in Vi}
+			edited.  See |:confirm| and 'confirm'.
 
 :q[uit]!		Quit without writing, also when the current buffer has
 			changes.  The buffer is unloaded, also when it has
 			'hidden' set.
 			If this is the last window and there is a modified
@@ -1129,11 +1108,11 @@ The names can be in upper- or lowercase.
 			buffer.
 			Use ":qall!" to exit always.
 
 :cq[uit]		Quit always, without writing, and return an error
 			code.  See |:cq|.  Used for Manx's QuickFix mode (see
-			|quickfix|).  {not in Vi}
+			|quickfix|).
 
 							*:wq*
 :wq [++opt]		Write the current file and quit.  Writing fails when
 			the file is read-only or the buffer does not have a
 			name.  Quitting fails when the last file in the
@@ -1167,48 +1146,47 @@ ZZ			Write current file, if modified, and quit (same as
 			current file, the file is written if it was modified
 			and the window is closed).
 
 							*ZQ*
 ZQ			Quit without checking for changes (same as ":q!").
-			{not in Vi}
+
 
 MULTIPLE WINDOWS AND BUFFERS				*window-exit*
 
 							*:qa* *:qall*
 :qa[ll]		Exit Vim, unless there are some buffers which have been
 		changed.  (Use ":bmod" to go to the next modified buffer).
 		When 'autowriteall' is set all changed buffers will be
-		written, like |:wqall|. {not in Vi}
+		written, like |:wqall|.
 
 :conf[irm] qa[ll]
 		Exit Vim.  Bring up a prompt when some buffers have been
-		changed.  See |:confirm|. {not in Vi}
+		changed.  See |:confirm|.
 
-:qa[ll]!	Exit Vim.  Any changes to buffers are lost. {not in Vi}
+:qa[ll]!	Exit Vim.  Any changes to buffers are lost.
 		Also see |:cquit|, it does the same but exits with a non-zero
 		value.
 
 							*:quita* *:quitall*
-:quita[ll][!]	Same as ":qall". {not in Vi}
+:quita[ll][!]	Same as ":qall".
 
 :wqa[ll] [++opt]				*:wqa* *:wqall* *:xa* *:xall*
 :xa[ll]		Write all changed buffers and exit Vim.  If there are buffers
 		without a file name, which are readonly or which cannot be
-		written for another reason, Vim will not quit. {not in Vi}
+		written for another reason, Vim will not quit.
 
 :conf[irm] wqa[ll] [++opt]
 :conf[irm] xa[ll]
 		Write all changed buffers and exit Vim.  Bring up a prompt
 		when some buffers are readonly or cannot be written for
-		another reason.  See |:confirm|. {not in Vi}
+		another reason.  See |:confirm|.
 
 :wqa[ll]! [++opt]
 :xa[ll]!	Write all changed buffers, even the ones that are readonly,
 		and exit Vim.  If there are buffers without a file name or
 		which cannot be written for another reason, or there is a
 		terminal with a running job, Vim will not quit.
-		{not in Vi}
 
 ==============================================================================
 6. Dialogs						*edit-dialogs*
 
 							*:confirm* *:conf*
@@ -1315,48 +1293,48 @@ present in 'cpoptions' and "!" is not used in the command.
 							*:cd* *E747* *E472*
 :cd[!]			On non-Unix systems: Print the current directory
 			name.  On Unix systems: Change the current directory
 			to the home directory.  Use |:pwd| to print the
 			current directory on all systems.
+			On Unix systems: clear any window-local directory.
 
 :cd[!] {path}		Change the current directory to {path}.
 			If {path} is relative, it is searched for in the
 			directories listed in |'cdpath'|.
+			Clear any window-local directory.
 			Does not change the meaning of an already opened file,
 			because its full path name is remembered.  Files from
 			the |arglist| may change though!
 			On MS-DOS this also changes the active drive.
 			To change to the directory of the current file: >
 				:cd %:h
 <
 							*:cd-* *E186*
 :cd[!] -		Change to the previous current directory (before the
-			previous ":cd {path}" command). {not in Vi}
+			previous ":cd {path}" command).
 
 							*:chd* *:chdir*
 :chd[ir][!] [path]	Same as |:cd|.
 
 							*:tcd*
 :tcd[!] {path}		Like |:cd|, but only set the directory for the current
 			tab.  The current window will also use this directory.
 			The current directory is not changed for windows in
 			other tabs and for windows in the current tab that
 			have their own window-local directory.
-			{not in Vi}
 
 							*:tch* *:tchdir*
-:tch[dir][!]		Same as |:tcd|. {not in Vi}
+:tch[dir][!]		Same as |:tcd|.
 
 							*:lc* *:lcd*
 :lc[d][!] {path}	Like |:cd|, but only set the current directory when
 			the cursor is in the current window.  The current
 			directory for other windows is not changed, switching
 			to another window will stop using {path}.
-			{not in Vi}
 
 							*:lch* *:lchdir*
-:lch[dir][!]		Same as |:lcd|. {not in Vi}
+:lch[dir][!]		Same as |:lcd|.
 
 							*:pw* *:pwd* *E187*
 :pw[d]			Print the current directory name.  {Vi: no pwd}
 			Also see |getcwd()|.
 
@@ -1414,12 +1392,11 @@ There are a few things to remember when editing binary files:
   reading the file.
 - Make sure the 'binary' option is set BEFORE loading the
   file.  Otherwise both <CR> <NL> and <NL> are considered to end a line
   and when the file is written the <NL> will be replaced with <CR> <NL>.
 - <Nul> characters are shown on the screen as ^@.  You can enter them with
-  "CTRL-V CTRL-@" or "CTRL-V 000" {Vi cannot handle <Nul> characters in the
-  file}
+  "CTRL-V CTRL-@" or "CTRL-V 000"
 - To insert a <NL> character in the file split a line.  When writing the
   buffer to a file a <NL> will be written for the <EOL>.
 - Vim normally appends an <EOL> at the end of the file if there is none.
   Setting the 'binary' option prevents this.  If you want to add the final
   <EOL>, set the 'endofline' option.  You can also read the value of this
diff --git a/runtime/doc/eval.txt b/runtime/doc/eval.txt
index e1ce00fa6..a39f72b55 100644
--- a/runtime/doc/eval.txt
+++ b/runtime/doc/eval.txt

 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
 
 
@@ -31,12 +31,10 @@ done, the features in this document are not available.  See |+eval| and
 11. No +eval feature		|no-eval-feature|
 12. The sandbox			|eval-sandbox|
 13. Textlock			|textlock|
 14. Testing			|testing|
 
-{Vi does not have any of these commands}
-
 ==============================================================================
 1. Variables						*variables*
 
 1.1 Variable types ~
 						*E712* *E896* *E897* *E899*
diff --git a/runtime/doc/farsi.txt b/runtime/doc/farsi.txt
index 27298593f..da47a0cfb 100644
--- a/runtime/doc/farsi.txt
+++ b/runtime/doc/farsi.txt

 
 
 		  VIM REFERENCE MANUAL    by Mortaza Ghassab Shiran
 
 
 Right to Left and Farsi Mapping for Vim		*farsi* *Farsi*
 
-{Vi does not have any of these commands}
 
 						*E27*
 Farsi support has been removed in patch 8.1.0932.  At that time it was
 outdated and unused.
 
diff --git a/runtime/doc/filetype.txt b/runtime/doc/filetype.txt
index 7a36804b3..68acf4d09 100644
--- a/runtime/doc/filetype.txt
+++ b/runtime/doc/filetype.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -10,11 +10,10 @@ Filetypes						*filetype* *file-type*
 2. Filetype plugin				|filetype-plugins|
 3. Docs for the default filetype plugins.	|ftplugin-docs|
 
 Also see |autocmd.txt|.
 
-{Vi does not have any of these commands}
 
 ==============================================================================
 1. Filetypes					*filetypes* *file-types*
 
 Vim can detect the type of file that is edited.  This is done by checking the
diff --git a/runtime/doc/fold.txt b/runtime/doc/fold.txt
index c3ee97e16..fb62d28de 100644
--- a/runtime/doc/fold.txt
+++ b/runtime/doc/fold.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -12,11 +12,10 @@ You can find an introduction on folding in chapter 28 of the user manual.
 1. Fold methods		|fold-methods|
 2. Fold commands	|fold-commands|
 3. Fold options		|fold-options|
 4. Behavior of folds	|fold-behavior|
 
-{Vi has no Folding}
 {not available when compiled without the |+folding| feature}
 
 ==============================================================================
 1. Fold methods					*fold-methods*
 
diff --git a/runtime/doc/gui.txt b/runtime/doc/gui.txt
index 2a8a70d44..c24d67273 100644
--- a/runtime/doc/gui.txt
+++ b/runtime/doc/gui.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -17,11 +17,10 @@ Vim's Graphical User Interface				*gui* *GUI*
 
 Other GUI documentation:
 |gui_x11.txt|	For specific items of the X11 GUI.
 |gui_w32.txt|	For specific items of the Win32 GUI.
 
-{Vi does not have any of these commands}
 
 ==============================================================================
 1. Starting the GUI				*gui-start* *E229* *E233*
 
 First you must make sure you actually have a version of Vim with the GUI code
diff --git a/runtime/doc/gui_w32.txt b/runtime/doc/gui_w32.txt
index 5ce3dc8c4..d139d5203 100644
--- a/runtime/doc/gui_w32.txt
+++ b/runtime/doc/gui_w32.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -17,11 +17,10 @@ Vim's Win32 Graphical User Interface			*gui-w32* *win32-gui*
 
 Other relevant documentation:
 |gui.txt|	For generic items of the GUI.
 |os_win32.txt| 	For Win32 specific items.
 
-{Vi does not have a Windows GUI}
 
 ==============================================================================
 1. Starting the GUI					*gui-w32-start*
 
 The Win32 GUI version of Vim will always start the GUI, no matter how you
@@ -412,11 +411,11 @@ detailed elsewhere: see |'mouse'|, |win32-hidden-menus|.
 You can drag and drop one or more files into the Vim window, where they will
 be opened as normal.  See |drag-n-drop|.
 
 							*:simalt* *:sim*
 :sim[alt] {key}		simulate pressing {key} while holding Alt pressed.
-			{not in Vi} {only for Win32 versions}
+			{only for Win32 versions}
 			Note: ":si" means ":s" with the "i" flag.
 
 Normally, Vim takes control of all Alt-<Key> combinations, to increase the
 number of possible mappings.  This clashes with the standard use of Alt as the
 key for accessing menus.
diff --git a/runtime/doc/gui_x11.txt b/runtime/doc/gui_x11.txt
index 28e9b91b5..ed65b77ae 100644
--- a/runtime/doc/gui_x11.txt
+++ b/runtime/doc/gui_x11.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -17,11 +17,10 @@ Vim's Graphical User Interface				*gui-x11* *GUI-X11*
 9. X11 selection mechanism	|x11-selection|
 
 Other relevant documentation:
 |gui.txt|	For generic items of the GUI.
 
-{Vi does not have any of these commands}
 
 ==============================================================================
 1. Starting the X11 GUI					*gui-x11-start* *E665*
 
 Then you can run the GUI version of Vim in either of these ways:
diff --git a/runtime/doc/hebrew.txt b/runtime/doc/hebrew.txt
index f2c3a3db4..8612c0bd9 100644
--- a/runtime/doc/hebrew.txt
+++ b/runtime/doc/hebrew.txt

 
 
 	   VIM REFERENCE MANUAL    by Ron Aaron (and Avner Lottem)
 
 
@@ -8,14 +8,11 @@ Hebrew Language support (options & mapping) for Vim		*hebrew*
 
 The supporting 'rightleft' functionality was originally created by Avner
 Lottem. <alottem at gmail dot com>  Ron Aaron <ron at ronware dot org> is
 currently helping support these features.
 
-{Vi does not have any of these commands}
-
-All this is only available when the |+rightleft| feature was enabled at
-compile time.
+{only available when the |+rightleft| feature was enabled at compile time}
 
 
 Introduction
 ------------
 Hebrew-specific options are 'hkmap', 'hkmapp' 'keymap'=hebrew and 'aleph'.
diff --git a/runtime/doc/helphelp.txt b/runtime/doc/helphelp.txt
index f6c6ab744..ce73f8c55 100644
--- a/runtime/doc/helphelp.txt
+++ b/runtime/doc/helphelp.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -22,11 +22,10 @@ Help on help files					*helphelp*
 			wide, the help window will appear just above the
 			current window.  Otherwise the new window is put at
 			the very top.
 			The 'helplang' option is used to select a language, if
 			the main help file is available in several languages.
-			{not in Vi}
 
 						*{subject}* *E149* *E661*
 :h[elp] {subject}	Like ":help", additionally jump to the tag {subject}.
 			For example:  >
 				:help options
@@ -95,11 +94,10 @@ Help on help files					*helphelp*
 			the ":help" argument.
 			You can also use <LF> or <CR> to separate the help
 			command from a following command.  You need to type
 			CTRL-V first to insert the <LF> or <CR>.  Example: >
 				:help so<C-V><CR>only
-<			{not in Vi}
 
 :h[elp]! [subject]	Like ":help", but in non-English help files prefer to
 			find a tag in a file with the same language as the
 			current file.  See |help-translated|.
 
@@ -131,11 +129,10 @@ Help on help files					*helphelp*
 			Cannot be followed by another command, everything is
 			used as part of the pattern.  But you can use
 			|:execute| when needed.
 			Compressed help files will not be searched (Fedora
 			compresses the help files).
-			{not in Vi}
 
 							*:lh* *:lhelpgrep*
 :lh[elpgrep] {pattern}[@xx]
 			Same as ":helpgrep", except the location list is used
 			instead of the quickfix list.  If the help window is
@@ -145,15 +142,15 @@ Help on help files					*helphelp*
 			location list for the current window is not changed
 			then.
 
 							*:exu* *:exusage*
 :exu[sage]		Show help on Ex commands.  Added to simulate the Nvi
-			command. {not in Vi}
+			command.
 
 							*:viu* *:viusage*
 :viu[sage]		Show help on Normal mode commands.  Added to simulate
-			the Nvi command. {not in Vi}
+			the Nvi command.
 
 When no argument is given to |:help| the file given with the 'helpfile' option
 will be opened.  Otherwise the specified tag is searched for in all "doc/tags"
 files in the directories specified in the 'runtimepath' option.
 
@@ -197,11 +194,10 @@ command: >
 			*:helpfind* *:helpf*
 :helpf[ind]		Like |:help|, but use a dialog to enter the argument.
 			Only for backwards compatibility.  It now executes the
 			ToolBar.FindHelp menu entry instead of using a builtin
 			dialog.  {only when compiled with |+GUI_GTK|}
-			{not in Vi}
 
 					*:helpt* *:helptags*
 				*E154* *E150* *E151* *E152* *E153* *E670*
 :helpt[ags] [++t] {dir}
 			Generate the help tags file(s) for directory {dir}.
@@ -222,12 +218,10 @@ command: >
 			equal to $VIMRUNTIME/doc.
 
 			To rebuild the help tags in the runtime directory
 			(requires write permission there): >
 				:helptags $VIMRUNTIME/doc
-<			{not in Vi}
-
 
 ==============================================================================
 2. Translated help files				*help-translated*
 
 It is possible to add translated help files, next to the original English help
diff --git a/runtime/doc/if_lua.txt b/runtime/doc/if_lua.txt
index d3576100e..24c53fa95 100644
--- a/runtime/doc/if_lua.txt
+++ b/runtime/doc/if_lua.txt

 
 
 		  VIM REFERENCE MANUAL    by Luis Carvalho
 
 
@@ -15,32 +15,29 @@ The Lua Interface to Vim				*lua* *Lua*
 7. Buffer userdata		|lua-buffer|
 8. Window userdata		|lua-window|
 9. luaeval() Vim function	|lua-luaeval|
 10. Dynamic loading		|lua-dynamic|
 
-{Vi does not have any of these commands}
-
-The Lua interface is available only when Vim was compiled with the
-|+lua| feature.
+{only available when Vim was compiled with the |+lua| feature}
 
 ==============================================================================
 1. Commands						*lua-commands*
 
 							*:lua*
 :[range]lua {chunk}
-			Execute Lua chunk {chunk}.    {not in Vi}
+			Execute Lua chunk {chunk}.
 
 Examples:
 >
 	:lua print("Hello, Vim!")
 	:lua local curbuf = vim.buffer() curbuf[7] = "line #7"
 <
 
 :[range]lua << {endmarker}
 {script}
 {endmarker}
-			Execute Lua script {script}.  {not in Vi}
+			Execute Lua script {script}.
 			Note: This command doesn't work when the Lua
 			feature wasn't compiled in.  To avoid errors, see
 			|script-here|.
 
 {endmarker} must NOT be preceded by any white space.  If {endmarker} is
@@ -73,11 +70,10 @@ If you use LuaJIT you can also use this: >
 			argument being set to the text of each line in turn,
 			without a trailing <EOL>, and the current line number.
 			If the value returned by the function is a string it
 			becomes the text of the line in the current turn. The
 			default for [range] is the whole file: "1,$".
-							{not in Vi}
 
 Examples:
 >
 	:luado return string.format("%s\t%d", line:reverse(), #line)
 
@@ -87,11 +83,11 @@ Examples:
 	:luado if bp:match(line) then return "-->\t" .. line end
 <
 
 							*:luafile*
 :[range]luafile {file}
-			Execute Lua script in {file}. {not in Vi}
+			Execute Lua script in {file}.
 			The whole argument is used as a single file name.
 
 Examples:
 >
 	:luafile script.lua
diff --git a/runtime/doc/if_mzsch.txt b/runtime/doc/if_mzsch.txt
index 9d27683f7..7b7e6b1a5 100644
--- a/runtime/doc/if_mzsch.txt
+++ b/runtime/doc/if_mzsch.txt

 
 
 		  VIM REFERENCE MANUAL    by Sergey Khorev
 
 
@@ -13,14 +13,11 @@ The MzScheme Interface to Vim				*mzscheme* *MzScheme*
 5. mzeval() Vim function		|mzscheme-mzeval|
 6. Using Function references		|mzscheme-funcref|
 7. Dynamic loading			|mzscheme-dynamic|
 8. MzScheme setup			|mzscheme-setup|
 
-{Vi does not have any of these commands}
-
-The MzScheme interface is available only if Vim was compiled with the
-|+mzscheme| feature.
+{only available when Vim was compiled with the |+mzscheme| feature}
 
 Based on the work of Brent Fulgham.
 Dynamic loading added by Sergey Khorev
 
 MzScheme and PLT Scheme names have been rebranded as Racket. For more
@@ -38,22 +35,22 @@ To speed up the process, you might also want to use --disable-gracket and
 ==============================================================================
 1. Commands						*mzscheme-commands*
 
 							*:mzscheme* *:mz*
 :[range]mz[scheme] {stmt}
-			Execute MzScheme statement {stmt}.  {not in Vi}
+			Execute MzScheme statement {stmt}.
 
 :[range]mz[scheme] << {endmarker}
 {script}
 {endmarker}
 			Execute inlined MzScheme script {script}.
 			Note: This command doesn't work if the MzScheme
 			feature wasn't compiled in.  To avoid errors, see
 			|script-here|.
 
 							*:mzfile* *:mzf*
-:[range]mzf[ile] {file}	Execute the MzScheme script in {file}.  {not in Vi}
+:[range]mzf[ile] {file}	Execute the MzScheme script in {file}.
 
 All of these commands do essentially the same thing - they execute a piece of
 MzScheme code, with the "current range" set to the given line
 range.
 
diff --git a/runtime/doc/if_ole.txt b/runtime/doc/if_ole.txt
index e734df984..46a8a5f38 100644
--- a/runtime/doc/if_ole.txt
+++ b/runtime/doc/if_ole.txt

 
 
 		  VIM REFERENCE MANUAL    by Paul Moore
 
 
@@ -10,14 +10,12 @@ The OLE Interface to Vim				*ole-interface*
 2. Methods			|ole-methods|
 3. The "normal" command		|ole-normal|
 4. Registration			|ole-registration|
 5. MS Visual Studio integration	|MSVisualStudio|
 
-{Vi does not have any of these commands}
-
-OLE is only available when compiled with the |+ole| feature.  See
-src/if_ole.INSTALL.
+{only available when compiled with the |+ole| feature.  See
+src/if_ole.INSTALL}
 An alternative is using the client-server communication |clientserver|.
 
 ==============================================================================
 1. Activation						*ole-activation*
 
diff --git a/runtime/doc/if_perl.txt b/runtime/doc/if_perl.txt
index db0a92cc2..7e33af24a 100644
--- a/runtime/doc/if_perl.txt
+++ b/runtime/doc/if_perl.txt

 
 
 		  VIM REFERENCE MANUAL    by Sven Verdoolaege
 					 and Matt Gerassimof
 
@@ -9,13 +9,11 @@ Perl and Vim				*perl* *Perl*
 1. Editing Perl files			|perl-editing|
 2. Compiling Vim with Perl interface	|perl-compiling|
 3. Using the Perl interface		|perl-using|
 4. Dynamic loading			|perl-dynamic|
 
-{Vi does not have any of these commands}
-
-The Perl interface only works when Vim was compiled with the |+perl| feature.
+{only available when Vim was compiled with the |+perl| feature}
 
 ==============================================================================
 1. Editing Perl files					*perl-editing*
 
 Vim syntax highlighting supports Perl and POD files.  Vim assumes a file is
diff --git a/runtime/doc/if_pyth.txt b/runtime/doc/if_pyth.txt
index 86d9ac261..9e2d3017c 100644
--- a/runtime/doc/if_pyth.txt
+++ b/runtime/doc/if_pyth.txt

 
 
 		  VIM REFERENCE MANUAL    by Paul Moore
 
 
@@ -17,12 +17,10 @@ The Python Interface to Vim				*python* *Python*
 9. Dynamic loading				|python-dynamic|
 10. Python 3					|python3|
 11. Python X					|python_x|
 12. Building with Python support		|python-building|
 
-{Vi does not have any of these commands}
-
 The Python 2.x interface is available only when Vim was compiled with the
 |+python| feature.
 The Python 3 interface is available only when Vim was compiled with the
 |+python3| feature.
 Both can be available at the same time, but read |python-2-and-3|.
@@ -74,11 +72,10 @@ and "EOF" do not have any indent.
 			in turn, without a trailing <EOL>, and the current
 			line number. The function should return a string or
 			None. If a string is returned, it becomes the text of
 			the line in the current turn. The default for [range]
 			is the whole file: "1,$".
-			{not in Vi}
 
 Examples:
 >
 	:pydo return "%s\t%d" % (line[::-1], len(line))
 	:pydo if line: return "%4d: %s" % (linenr, line)
@@ -96,11 +93,11 @@ python. For example: >
 	:'<,'>py3do return py_vim_string_replace(line)
 <
 							*:pyfile* *:pyf*
 :[range]pyf[ile] {file}
 			Execute the Python script in {file}.  The whole
-			argument is used as a single file name.  {not in Vi}
+			argument is used as a single file name.
 
 Both of these commands do essentially the same thing - they execute a piece of
 Python code, with the "current range" |python-range| set to the given line
 range.
 
diff --git a/runtime/doc/if_ruby.txt b/runtime/doc/if_ruby.txt
index e2e774215..de36c0131 100644
--- a/runtime/doc/if_ruby.txt
+++ b/runtime/doc/if_ruby.txt

 
 
 		  VIM REFERENCE MANUAL    by Shugo Maeda
 
 The Ruby Interface to Vim				*ruby* *Ruby*
@@ -12,14 +12,13 @@ The Ruby Interface to Vim				*ruby* *Ruby*
 4. Vim::Window objects		|ruby-window|
 5. Global variables		|ruby-globals|
 6. rubyeval() Vim function	|ruby-rubyeval|
 7. Dynamic loading		|ruby-dynamic|
 
-{Vi does not have any of these commands}
 			*E266* *E267* *E268* *E269* *E270* *E271* *E272* *E273*
 
-The Ruby interface only works when Vim was compiled with the |+ruby| feature.
+{only available when Vim was compiled with the |+ruby| feature}
 
 The home page for ruby is http://www.ruby-lang.org/.  You can find links for
 downloading Ruby there.
 
 ==============================================================================
diff --git a/runtime/doc/if_tcl.txt b/runtime/doc/if_tcl.txt
index e822dfd17..4a5379ddb 100644
--- a/runtime/doc/if_tcl.txt
+++ b/runtime/doc/if_tcl.txt

 
 
 		  VIM REFERENCE MANUAL    by Ingo Wilken
 
 
@@ -14,13 +14,12 @@ The Tcl Interface to Vim				*tcl* *Tcl* *TCL*
 6. Miscellaneous; Output from Tcl	|tcl-misc| |tcl-output|
 7. Known bugs & problems		|tcl-bugs|
 8. Examples				|tcl-examples|
 9. Dynamic loading			|tcl-dynamic|
 
-{Vi does not have any of these commands} *E280*
-
-The Tcl interface only works when Vim was compiled with the |+tcl| feature.
+*E280*
+{only available when Vim was compiled with the |+tcl| feature}
 
 WARNING: There are probably still some bugs.  Please send bug reports,
 comments, ideas etc to <Ingo.Wilken@informatik.uni-oldenburg.de>
 
 ==============================================================================
@@ -64,16 +63,15 @@ To see what version of Tcl you have: >
 			line in turn, and "lnum" to the line number.  Setting
 			"line" will change the text, but note that it is not
 			possible to add or delete lines using this command.
 			If {cmd} returns an error, the command is interrupted.
 			The default for [range] is the whole file: "1,$".
-			See |tcl-var-line| and |tcl-var-lnum|.  {not in Vi}
+			See |tcl-var-line| and |tcl-var-lnum|.
 
 							*:tclfile* *:tclf*
 :tclf[ile] {file}	Execute the Tcl script in {file}.  This is the same as
 			":tcl source {file}", but allows file name completion.
-			{not in Vi}
 
 
 Note that Tcl objects (like variables) persist from one command to the next,
 just as in the Tcl shell.
 
diff --git a/runtime/doc/index.txt b/runtime/doc/index.txt
index 9b5663e1e..792a71569 100644
--- a/runtime/doc/index.txt
+++ b/runtime/doc/index.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 								*index*
@@ -860,10 +860,14 @@ tag		char	      note action in Normal mode	~
 |zr|		zr		   add one to 'foldlevel'
 |zs|		zs		   when 'wrap' off scroll horizontally to
 				   position the cursor at the start (left
 				   side) of the screen
 |zt|		zt		   redraw, cursor line at top of window
+|zuw|		zuw		   undo |zw|
+|zug|		zug		   undo |zg|
+|zuW|		zuW		   undo |zW|
+|zuG|		zuG		   undo |zG|
 |zv|		zv		   open enough folds to view the cursor line
 |zw|		zw		   mark word as wrong (bad) spelled word
 |zx|		zx		   re-apply 'foldlevel' and do "zv"
 |zz|		zz		   redraw, cursor line at center of window
 |z<Left>|	z<Left>		   same as "zh"
diff --git a/runtime/doc/insert.txt b/runtime/doc/insert.txt
index 9d7e4ced4..e962343a0 100644
--- a/runtime/doc/insert.txt
+++ b/runtime/doc/insert.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -60,11 +60,11 @@ CTRL-C		Quit insert mode, go back to Normal mode.  Do not check for
 
 						*i_CTRL-@*
 CTRL-@		Insert previously inserted text and stop insert.  {Vi: only
 		when typed as first char, only up to 128 chars}
 						*i_CTRL-A*
-CTRL-A		Insert previously inserted text.  {not in Vi}
+CTRL-A		Insert previously inserted text.
 
 						*i_CTRL-H* *i_<BS>* *i_BS*
 <BS> or CTRL-H	Delete the character before the cursor (see |i_backspacing|
 		about joining lines).
 		See |:fixdel| if your <BS> key does not do what you want.
@@ -73,11 +73,10 @@ CTRL-A		Insert previously inserted text.  {not in Vi}
 <Del>		Delete the character under the cursor.  If the cursor is at
 		the end of the line, and the 'backspace' option includes
 		"eol", delete the <EOL>; the next line is appended after the
 		current one.
 		See |:fixdel| if your <Del> key does not do what you want.
-		{not in Vi}
 						*i_CTRL-W*
 CTRL-W		Delete the word before the cursor (see |i_backspacing| about
 		joining lines).  See the section "word motions",
 		|word-motions|, for the definition of a word.
 						*i_CTRL-U*
@@ -100,14 +99,14 @@ CTRL-U		Delete all entered characters before the cursor in the current
 CTRL-K {char1} [char2]
 		Enter digraph (see |digraphs|).  When {char1} is a special
 		key, the code for that key is inserted in <> form.  For
 		example, the string "<S-Space>" can be entered by typing
 		<C-K><S-Space> (two keys).  Neither char is considered for
-		mapping.  {not in Vi}
+		mapping.
 
-CTRL-N		Find next keyword (see |i_CTRL-N|).  {not in Vi}
-CTRL-P		Find previous keyword (see |i_CTRL-P|).  {not in Vi}
+CTRL-N		Find next keyword (see |i_CTRL-N|).
+CTRL-P		Find previous keyword (see |i_CTRL-P|).
 
 CTRL-R {0-9a-z"%#*+:.-=}					*i_CTRL-R*
 		Insert the contents of a register.  Between typing CTRL-R and
 		the second character, '"' will be displayed to indicate that
 		you are expected to enter the name of a register.
@@ -140,11 +139,11 @@ CTRL-R {0-9a-z"%#*+:.-=}					*i_CTRL-R*
 				too.
 				When the result is a Float it's automatically
 				converted to a String.
 				When append() or setline() is invoked the undo
 				sequence will be broken.
-		See |registers| about registers.  {not in Vi}
+		See |registers| about registers.
 
 CTRL-R CTRL-R {0-9a-z"%#*+/:.-=}			*i_CTRL-R_CTRL-R*
 		Insert the contents of a register.  Works like using a single
 		CTRL-R, but the text is inserted literally, not as if typed.
 		This differs when the register contains characters like <BS>.
@@ -152,27 +151,27 @@ CTRL-R CTRL-R {0-9a-z"%#*+/:.-=}			*i_CTRL-R_CTRL-R*
 	CTRL-R a		results in "ac".
 	CTRL-R CTRL-R a		results in "ab^Hc".
 <		Options 'textwidth', 'formatoptions', etc. still apply.  If
 		you also want to avoid these, use CTRL-R CTRL-O, see below.
 		The '.' register (last inserted text) is still inserted as
-		typed.  {not in Vi}
+		typed.
 
 CTRL-R CTRL-O {0-9a-z"%#*+/:.-=}			*i_CTRL-R_CTRL-O*
 		Insert the contents of a register literally and don't
 		auto-indent.  Does the same as pasting with the mouse
 		|<MiddleMouse>|. When the register is linewise this will
 		insert the text above the current line, like with `P`.
 		Does not replace characters!
 		The '.' register (last inserted text) is still inserted as
-		typed.  {not in Vi}
+		typed.
 
 CTRL-R CTRL-P {0-9a-z"%#*+/:.-=}			*i_CTRL-R_CTRL-P*
 		Insert the contents of a register literally and fix the
 		indent, like |[<MiddleMouse>|.
 		Does not replace characters!
 		The '.' register (last inserted text) is still inserted as
-		typed.  {not in Vi}
+		typed.
 
 						*i_CTRL-T*
 CTRL-T		Insert one shiftwidth of indent at the start of the current
 		line.  The indent is always rounded to a 'shiftwidth' (this is
 		vi compatible).  {Vi: only when in indent}
@@ -204,16 +203,16 @@ CTRL-Q		Same as CTRL-V.
 		Note: Some terminal connections may eat CTRL-Q, it doesn't
 		work then.  It does work in the GUI.
 
 CTRL-X		Enter CTRL-X mode.  This is a sub-mode where commands can
 		be given to complete words or scroll the window.  See
-		|i_CTRL-X| and |ins-completion|. {not in Vi}
+		|i_CTRL-X| and |ins-completion|.
 
 						*i_CTRL-E*
-CTRL-E		Insert the character which is below the cursor.  {not in Vi}
+CTRL-E		Insert the character which is below the cursor.
 						*i_CTRL-Y*
-CTRL-Y		Insert the character which is above the cursor.  {not in Vi}
+CTRL-Y		Insert the character which is above the cursor.
 		Note that for CTRL-E and CTRL-Y 'textwidth' is not used, to be
 		able to copy characters from a long line.
 
 						*i_CTRL-_*
 CTRL-_		Switch between languages, as follows:
@@ -226,11 +225,10 @@ CTRL-_		Switch between languages, as follows:
 
 		This command is only available when the 'allowrevins' option
 		is set.
 		Please refer to |rileft.txt| for more information about
 		right-to-left mode.
-		{not in Vi}
 		Only if compiled with the |+rightleft| feature.
 
 						*i_CTRL-^*
 CTRL-^		Toggle the use of typing language characters.
 		When language |:lmap| mappings are defined:
@@ -246,18 +244,16 @@ CTRL-^		Toggle the use of typing language characters.
 		When set to 1, the value of the "b:keymap_name" variable, the
 		'keymap' option or "<lang>" appears in the status line.
 		The language mappings are normally used to type characters
 		that are different from what the keyboard produces.  The
 		'keymap' option can be used to install a whole number of them.
-		{not in Vi}
 
 						*i_CTRL-]*
-CTRL-]		Trigger abbreviation, without inserting a character.  {not in
-		Vi}
+CTRL-]		Trigger abbreviation, without inserting a character.
 
 						*i_<Insert>*
-<Insert>	Toggle between Insert and Replace mode.  {not in Vi}
+<Insert>	Toggle between Insert and Replace mode.
 -----------------------------------------------------------------------
 
 						*i_backspacing*
 The effect of the <BS>, CTRL-W, and CTRL-U depend on the 'backspace' option
 (unless 'revins' is set).  This is a comma separated list of items:
@@ -517,19 +513,18 @@ whitespace of the tab.  If you want to enter a real <Tab>, type CTRL-V first
 (use CTRL-Q when CTRL-V is mapped |i_CTRL-Q|).
 The 'expandtab' option is off by default.  Note that in Replace mode, a single
 character is replaced with several spaces.  The result of this is that the
 number of characters in the line increases.  Backspacing will delete one
 space at a time.  The original character will be put back for only one space
-that you backspace over (the last one).  {Vi does not have the 'expandtab'
-option}
+that you backspace over (the last one).
 
 							*ins-smarttab*
 When the 'smarttab' option is on, a <Tab> inserts 'shiftwidth' positions at
 the beginning of a line and 'tabstop' positions in other places.  This means
 that often spaces instead of a <Tab> character are inserted.  When 'smarttab'
 is off, a <Tab> always inserts 'tabstop' positions, and 'shiftwidth' is only
-used for ">>" and the like.  {not in Vi}
+used for ">>" and the like.
 
 							*ins-softtabstop*
 When the 'softtabstop' option is non-zero, a <Tab> inserts 'softtabstop'
 positions, and a <BS> used to delete white space, will delete 'softtabstop'
 positions.  This feels like 'tabstop' was set to 'softtabstop', but a real
@@ -565,18 +560,17 @@ added are deleted.  This is effectively a character-at-a-time undo.
 
 If the 'expandtab' option is on, a <Tab> will replace one character with
 several spaces.  The result of this is that the number of characters in the
 line increases.  Backspacing will delete one space at a time.  The original
 character will be put back for only one space that you backspace over (the
-last one).  {Vi does not have the 'expandtab' option}
+last one).
 
 ==============================================================================
 6. Virtual Replace mode		*vreplace-mode* *Virtual-Replace-mode*
 
 Enter Virtual Replace mode with the "gR" command in normal mode.
 {not available when compiled without the |+vreplace| feature}
-{Vi does not have Virtual Replace mode}
 
 Virtual Replace mode is similar to Replace mode, but instead of replacing
 actual characters in the file, you are replacing screen real estate, so that
 characters further on in the file never appear to move.
 
@@ -1805,22 +1799,21 @@ I			Insert text before the first non-blank in the line
 			When the 'H' flag is present in 'cpoptions' and the
 			line only contains blanks, insert start just before
 			the last blank.
 
 							*gI*
-gI			Insert text in column 1 [count] times.  {not in Vi}
+gI			Insert text in column 1 [count] times.
 
 							*gi*
 gi			Insert text in the same position as where Insert mode
 			was stopped last time in the current buffer.
 			This uses the |'^| mark.  It's different from "`^i"
 			when the mark is past the end of the line.
 			The position is corrected for inserted/deleted lines,
 			but NOT for inserted/deleted characters.
 			When the |:keepjumps| command modifier is used the |'^|
 			mark won't be changed.
-			{not in Vi}
 
 							*o*
 o			Begin a new line below the cursor and insert text,
 			repeat [count] times.  {Vi: blank [count] screen
 			lines}
@@ -1883,11 +1876,10 @@ NOTE: These commands cannot be used with |:global| or |:vglobal|.
 			Otherwise insertion starts at the cursor position.
 			Note that when using this command in a function or
 			script, the insertion only starts after the function
 			or script is finished.
 			This command does not work from |:normal|.
-			{not in Vi}
 
 							*:stopi* *:stopinsert*
 :stopi[nsert]		Stop Insert mode as soon as possible.  Works like
 			typing <Esc> in Insert mode.
 			Can be used in an autocommand, example: >
@@ -1900,16 +1892,14 @@ NOTE: These commands cannot be used with |:global| or |:vglobal|.
 			(ie. begin replace mode at the end-of-line).  Other-
 			wise replacement begins at the cursor position.
 			Note that when using this command in a function or
 			script that the replacement will only start after
 			the function or script is finished.
-			{not in Vi}
 
 							*:startgreplace*
 :startg[replace][!]	Just like |:startreplace|, but use Virtual Replace
 			mode, like with |gR|.
-			{not in Vi}
 
 ==============================================================================
 10. Inserting a file					*inserting-file*
 
 							*:r* *:re* *:read*
diff --git a/runtime/doc/intro.txt b/runtime/doc/intro.txt
index 106245b83..198ff1860 100644
--- a/runtime/doc/intro.txt
+++ b/runtime/doc/intro.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -32,13 +32,11 @@ It can be accessed from within Vim with the <Help> or <F1> key and with the
 |:help| command (just type ":help", without the bars or quotes).
    The 'helpfile' option can be set to the name of the help file, in case it
 is not located in the default place.  You can jump to subjects like with tags:
 Use CTRL-] to jump to a subject under the cursor, use CTRL-T to jump back.
 
-Throughout this manual the differences between Vi and Vim are mentioned in
-curly braces, like this: {Vi does not have on-line help}.  See |vi_diff.txt|
-for a summary of the differences between Vim and Vi.
+The differences between Vi and Vim are mentioned in |vi_diff.txt|.
 
 This manual refers to Vim on various machines.  There may be small differences
 between different computers and terminals.  Besides the remarks given in this
 document, there is a separate document for each supported system, see
 |sys-file-list|.
@@ -701,11 +699,10 @@ Q			Switch to "Ex" mode.  This is a bit like typing ":"
 					*gQ*
 gQ			Switch to "Ex" mode like with "Q", but really behave
 			like typing ":" commands after another.  All command
 			line editing, completion etc. is available.
 			Use the ":vi" command |:visual| to exit "Ex" mode.
-			{not in Vi}
 
 ==============================================================================
 7. The window contents					*window-contents*
 
 In Normal mode and Insert/Replace mode the screen window will show the current
diff --git a/runtime/doc/map.txt b/runtime/doc/map.txt
index 4121fbd1c..7a74bb0ab 100644
--- a/runtime/doc/map.txt
+++ b/runtime/doc/map.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -74,11 +74,11 @@ modes.
 :cno[remap] {lhs} {rhs}		|mapmode-c|	*:cno* *:cnoremap*
 :tno[remap] {lhs} {rhs}		|mapmode-t|	*:tno* *:tnoremap*
 			Map the key sequence {lhs} to {rhs} for the modes
 			where the map command applies.  Disallow mapping of
 			{rhs}, to avoid nested and recursive mappings.  Often
-			used to redefine a command.  {not in Vi}
+			used to redefine a command.
 
 
 :unm[ap]  {lhs}			|mapmode-nvo|		*:unm*  *:unmap*
 :nun[map] {lhs}			|mapmode-n|		*:nun*  *:nunmap*
 :vu[nmap] {lhs}			|mapmode-v|		*:vu*   *:vunmap*
@@ -108,11 +108,11 @@ modes.
 :imapc[lear]			|mapmode-i|		*:imapc*  *:imapclear*
 :lmapc[lear]			|mapmode-l|		*:lmapc*  *:lmapclear*
 :cmapc[lear]			|mapmode-c|		*:cmapc*  *:cmapclear*
 :tmapc[lear]			|mapmode-t|		*:tmapc*  *:tmapclear*
 			Remove ALL mappings for the modes where the map
-			command applies.  {not in Vi}
+			command applies.
 			Use the <buffer> argument to remove buffer-local
 			mappings |:map-<buffer>|
 			Warning: This also removes the default mappings.
 
 :map				|mapmode-nvo|
@@ -141,11 +141,10 @@ modes.
 :lm[ap] {lhs}			|mapmode-l|		*:lmap_l*
 :cm[ap] {lhs}			|mapmode-c|		*:cmap_l*
 :tma[p] {lhs}			|mapmode-t|		*:tmap_l*
 			List the key mappings for the key sequences starting
 			with {lhs} in the modes where the map command applies.
-			{not in Vi}
 
 These commands are used to map a key or key sequence to a string of
 characters.  You can use this to put command sequences under function keys,
 translate one key into another, etc.  See |:mkexrc| for how to save and
 restore the current mappings.
@@ -158,11 +157,10 @@ ambiguous.  Example: >
 When Vim has read "aa", it will need to get another character to be able to
 decide if "aa" or "aaa" should be mapped.  This means that after typing "aa"
 that mapping won't get expanded yet, Vim is waiting for another character.
 If you type a space, then "foo" will get inserted, plus the space.  If you
 type "a", then "bar" will get inserted.
-{Vi does not allow ambiguous mappings}
 
 
 1.2 SPECIAL ARGUMENTS					*:map-arguments*
 
 "<buffer>", "<nowait>", "<silent>", "<special>", "<script>", "<expr>" and
@@ -1014,49 +1012,44 @@ See |:verbose-cmd| for more information.
 			remove abbreviations after expansion.  To avoid
 			expansion insert a CTRL-V (type it twice).
 
 						*:norea* *:noreabbrev*
 :norea[bbrev] [<expr>] [<buffer>] [lhs] [rhs]
-			same as ":ab", but no remapping for this {rhs} {not
-			in Vi}
+			Same as ":ab", but no remapping for this {rhs}.
 
 						*:ca* *:cabbrev*
 :ca[bbrev] [<expr>] [<buffer>] [lhs] [rhs]
-			same as ":ab", but for Command-line mode only.  {not
-			in Vi}
+			Same as ":ab", but for Command-line mode only.
 
 						*:cuna* *:cunabbrev*
-:cuna[bbrev] {lhs}	same as ":una", but for Command-line mode only.  {not
-			in Vi}
+:cuna[bbrev] {lhs}	Same as ":una", but for Command-line mode only.
 
 						*:cnorea* *:cnoreabbrev*
 :cnorea[bbrev] [<expr>] [<buffer>] [lhs] [rhs]
 			same as ":ab", but for Command-line mode only and no
-			remapping for this {rhs} {not in Vi}
+			remapping for this {rhs}
 
 						*:ia* *:iabbrev*
 :ia[bbrev] [<expr>] [<buffer>] [lhs] [rhs]
-			same as ":ab", but for Insert mode only.  {not in Vi}
+			Same as ":ab", but for Insert mode only.
 
 						*:iuna* *:iunabbrev*
-:iuna[bbrev] {lhs}	same as ":una", but for insert mode only.  {not in
-			Vi}
+:iuna[bbrev] {lhs}	Same as ":una", but for insert mode only.
 
 						*:inorea* *:inoreabbrev*
 :inorea[bbrev] [<expr>] [<buffer>] [lhs] [rhs]
-			same as ":ab", but for Insert mode only and no
-			remapping for this {rhs} {not in Vi}
+			Same as ":ab", but for Insert mode only and no
+			remapping for this {rhs}.
 
 							*:abc* *:abclear*
-:abc[lear] [<buffer>]	Remove all abbreviations.  {not in Vi}
+:abc[lear] [<buffer>]	Remove all abbreviations.
 
 							*:iabc* *:iabclear*
-:iabc[lear] [<buffer>]	Remove all abbreviations for Insert mode.  {not in Vi}
+:iabc[lear] [<buffer>]	Remove all abbreviations for Insert mode.
 
 							*:cabc* *:cabclear*
-:cabc[lear] [<buffer>]	Remove all abbreviations for Command-line mode.  {not
-			in Vi}
+:cabc[lear] [<buffer>]	Remove all abbreviations for Command-line mode.
 
 							*using_CTRL-V*
 It is possible to use special characters in the rhs of an abbreviation.
 CTRL-V has to be used to avoid the special meaning of most non printable
 characters.  How many CTRL-Vs need to be typed depends on how you enter the
@@ -1145,12 +1138,11 @@ The "<SNR>" will be shown when listing functions and mappings.  This is useful
 to find out what they are defined to.
 
 The |:scriptnames| command can be used to see which scripts have been sourced
 and what their <SNR> number is.
 
-This is all {not in Vi} and {not available when compiled without the |+eval|
-feature}.
+This is all {not available when compiled without the |+eval| feature}.
 
 ==============================================================================
 4. User-defined commands				*user-commands*
 
 It is possible to define your own Ex commands.  A user-defined command can act
@@ -1389,29 +1381,31 @@ Possible attributes are:
 	-range=N    A count (default N) which is specified in the line
 		    number position (like |:split|); allows for zero line
 		    number.
 	-count=N    A count (default N) which is specified either in the line
 		    number position, or as an initial argument (like |:Next|).
-		    Specifying -count (without a default) acts like -count=0
+	-count	    acts like -count=0
 
 Note that -range=N and -count=N are mutually exclusive - only one should be
 specified.
 
 					*:command-addr*
 It is possible that the special characters in the range like ., $ or % which
 by default correspond to the current line, last line and the whole buffer,
 relate to arguments, (loaded) buffers, windows or tab pages.
 
 Possible values are (second column is the short name used in listing):
-    -addr=lines		  	Range of lines (this is the default)
+    -addr=lines		  	Range of lines (this is the default for -range)
     -addr=arguments	  arg	Range for arguments
     -addr=buffers	  buf	Range for buffers (also not loaded buffers)
     -addr=loaded_buffers  load	Range for loaded buffers
     -addr=windows	  win	Range for windows
     -addr=tabs		  tab	Range for tab pages
     -addr=quickfix	  qf	Range for quickfix entries
-    -addr=other		  ?	other kind of range
+    -addr=other		  ?	other kind of range; can use ".", "$" and "%"
+				as with "lines" (this is the default for
+				-count)
 
 
 Special cases ~
 					*:command-bang* *:command-bar*
 					*:command-register* *:command-buffer*
diff --git a/runtime/doc/mbyte.txt b/runtime/doc/mbyte.txt
index 15198f6b6..7b8c21f3f 100644
--- a/runtime/doc/mbyte.txt
+++ b/runtime/doc/mbyte.txt

 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar et al.
 
 
diff --git a/runtime/doc/message.txt b/runtime/doc/message.txt
index 65cd8df08..7a4543fc4 100644
--- a/runtime/doc/message.txt
+++ b/runtime/doc/message.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -828,29 +828,27 @@ Type					effect ~
      d					down a page (half a screen)
      <Space> or f or <PageDown>		down a screen
      G					down all the way, until the hit-enter
 					prompt
 
-     <BS> or k or <Up>			one line back (*)
-     u					up a page (half a screen) (*)
-     b or <PageUp>			back a screen (*)
-     g					back to the start (*)
+     <BS> or k or <Up>			one line back
+     u					up a page (half a screen)
+     b or <PageUp>			back a screen
+     g					back to the start
 
      q, <Esc> or CTRL-C			stop the listing
      :					stop the listing and enter a
 					     command-line
     <C-Y>				yank (copy) a modeless selection to
 					the clipboard ("* and "+ registers)
     {menu-entry}			what the menu is defined to in
 					Cmdline-mode.
-    <LeftMouse> (**)			next page
+    <LeftMouse>				next page (*)
 
 Any other key causes the meaning of the keys to be displayed.
 
-(*)  backwards scrolling is {not in Vi}.  Only scrolls back to where messages
-     started to scroll.
-(**) Clicking the left mouse button only works:
+(*) Clicking the left mouse button only works:
      - For the GUI: in the last line of the screen.
      - When 'r' is included in 'mouse' (but then selecting text won't work).
 
 
 Note: The typed key is directly obtained from the terminal, it is not mapped
diff --git a/runtime/doc/mlang.txt b/runtime/doc/mlang.txt
index f25aef275..9cc12f10c 100644
--- a/runtime/doc/mlang.txt
+++ b/runtime/doc/mlang.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -15,11 +15,10 @@ The basics are explained in the user manual: |usr_45.txt|.
 2. Menus			|multilang-menus|
 3. Scripts			|multilang-scripts|
 
 Also see |help-translated| for multi-language help.
 
-{Vi does not have any of these features}
 {not available when compiled without the |+multi_lang| feature}
 
 ==============================================================================
 1. Messages						*multilang-messages*
 
diff --git a/runtime/doc/motion.txt b/runtime/doc/motion.txt
index 7ebdee666..bc015a3ac 100644
--- a/runtime/doc/motion.txt
+++ b/runtime/doc/motion.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -183,11 +183,11 @@ l		or					*l*
 <Home>			To the first character of the line.  |exclusive|
 			motion.  When moving up or down next, stay in same
 			TEXT column (if possible).  Most other commands stay
 			in the same SCREEN column.  <Home> works like "1|",
 			which differs from "0" when the line starts with a
-			<Tab>.  {not in Vi}
+			<Tab>.
 
 							*^*
 ^			To the first non-blank character of the line.
 			|exclusive| motion.
 
@@ -200,34 +200,33 @@ $  or <End>		To the end of the line.  When a count is given also go
 			back from past the end of the line to the last
 			character in the line.
 
 							*g_*
 g_			To the last non-blank character of the line and
-			[count - 1] lines downward |inclusive|. {not in Vi}
+			[count - 1] lines downward |inclusive|.
 
 							*g0* *g<Home>*
 g0 or g<Home>		When lines wrap ('wrap' on): To the first character of
 			the screen line.  |exclusive| motion.  Differs from
 			"0" when a line is wider than the screen.
 			When lines don't wrap ('wrap' off): To the leftmost
 			character of the current line that is on the screen.
 			Differs from "0" when the first character of the line
-			is not on the screen.  {not in Vi}
+			is not on the screen.
 
 							*g^*
 g^			When lines wrap ('wrap' on): To the first non-blank
 			character of the screen line.  |exclusive| motion.
 			Differs from "^" when a line is wider than the screen.
 			When lines don't wrap ('wrap' off): To the leftmost
 			non-blank character of the current line that is on the
 			screen.  Differs from "^" when the first non-blank
-			character of the line is not on the screen.  {not in
-			Vi}
+			character of the line is not on the screen.
 
 							*gm*
 gm			Like "g0", but half a screenwidth to the right (or as
-			much as possible). {not in Vi}
+			much as possible).
 
 							*g$* *g<End>*
 g$ or g<End>		When lines wrap ('wrap' on): To the last character of
 			the screen line and [count - 1] screen lines downward
 			|inclusive|.  Differs from "$" when a line is wider
@@ -238,11 +237,10 @@ g$ or g<End>		When lines wrap ('wrap' on): To the last character of
 			the line is not on the screen or when a count is used.
 			Additionally, vertical movements keep the column,
 			instead of going to the end of the line.
 			When 'virtualedit' is enabled moves to the end of the
 			screen line.
-			{not in Vi}
 
 							*bar*
 |			To screen column [count] in the current line.
 			|exclusive| motion.  Ceci n'est pas une pipe.
 
@@ -294,16 +292,16 @@ CTRL-J		or					*CTRL-J*
 CTRL-N			[count] lines downward |linewise|.
 
 gk		or					*gk* *g<Up>*
 g<Up>			[count] display lines upward.  |exclusive| motion.
 			Differs from 'k' when lines wrap, and when used with
-			an operator, because it's not linewise.  {not in Vi}
+			an operator, because it's not linewise.
 
 gj		or					*gj* *g<Down>*
 g<Down>			[count] display lines downward.  |exclusive| motion.
 			Differs from 'j' when lines wrap, and when used with
-			an operator, because it's not linewise.  {not in Vi}
+			an operator, because it's not linewise.
 
 							*-*
 -  <minus>		[count] lines upward, on the first non-blank
 			character |linewise|.
 
@@ -322,11 +320,11 @@ G			Goto line [count], default last line, on the first
 			set, keep the same column.
 			G is one of the |jump-motions|.
 
 							*<C-End>*
 <C-End>			Goto line [count], default last line, on the last
-			character |inclusive|. {not in Vi}
+			character |inclusive|.
 
 <C-Home>	or					*gg* *<C-Home>*
 gg			Goto line [count], default first line, on the first
 			non-blank character |linewise|.  If 'startofline' not
 			set, keep the same column.
@@ -340,21 +338,20 @@ gg			Goto line [count], default first line, on the first
 							*N%*
 {count}%		Go to {count} percentage in the file, on the first
 			non-blank in the line |linewise|.  To compute the new
 			line number this formula is used:
 			    ({count} * number-of-lines + 99) / 100
-			See also 'startofline' option.  {not in Vi}
+			See also 'startofline' option.
 
 :[range]go[to] [count]					*:go* *:goto* *go*
 [count]go		Go to [count] byte in the buffer.  Default [count] is
 			one, start of the file.  When giving [range], the
 			last number in it used as the byte count.  End-of-line
 			characters are counted depending on the current
 			'fileformat' setting.
 			Also see the |line2byte()| function, and the 'o'
 			option in 'statusline'.
-			{not in Vi}
 			{not available when compiled without the
 			|+byte_offset| feature}
 
 These commands move to the specified line.  They stop when reaching the first
 or the last line.  The first two commands put the cursor in the same column
@@ -514,11 +511,10 @@ This is a series of commands that can only be used while in Visual mode or
 after an operator.  The commands that start with "a" select "a"n object
 including white space, the commands starting with "i" select an "inner" object
 without white space, or just the white space.  Thus the "inner" commands
 always select less text than the "a" commands.
 
-These commands are {not in Vi}.
 These commands are not available when the |+textobjects| feature has been
 disabled at compile time.
 Also see `gn` and `gN`, operating on the last search pattern.
 
 							*v_aw* *aw*
@@ -778,32 +774,31 @@ m<  or  m>		Set the |'<| or |'>| mark.  Useful to change what the
 						*'* *'a* *`* *`a*
 '{a-z}  `{a-z}		Jump to the mark {a-z} in the current buffer.
 
 						*'A* *'0* *`A* *`0*
 '{A-Z0-9}  `{A-Z0-9}	To the mark {A-Z0-9} in the file where it was set (not
-			a motion command when in another file).  {not in Vi}
+			a motion command when in another file).
 
 						*g'* *g'a* *g`* *g`a*
 g'{mark}  g`{mark}
 			Jump to the {mark}, but don't change the jumplist when
 			jumping within the current buffer.  Example: >
 				g`"
 <			jumps to the last known position in a file.  See
 			$VIMRUNTIME/vimrc_example.vim.
 			Also see |:keepjumps|.
-			{not in Vi}
 
 						*:marks*
 :marks			List all the current marks (not a motion command).
 			The |'(|, |')|, |'{| and |'}| marks are not listed.
 			The first column has number zero.
-			{not in Vi}
+
 						*E283*
 :marks {arg}		List the marks that are mentioned in {arg} (not a
 			motion command).  For example: >
 				:marks aB
-<			to list marks 'a' and 'B'.  {not in Vi}
+<			to list marks 'a' and 'B'.
 
 							*:delm* *:delmarks*
 :delm[arks] {marks}	Delete the specified marks.  Marks that can be deleted
 			include A-Z and 0-9.  You cannot delete the ' mark.
 			They can be specified by giving the list of mark
@@ -813,15 +808,13 @@ g'{mark}  g`{mark}
 			   :delmarks a b 1    deletes marks a, b and 1
 			   :delmarks Aa       deletes marks A and a
 			   :delmarks p-z      deletes marks in the range p to z
 			   :delmarks ^.[]     deletes marks ^ . [ ]
 			   :delmarks \"	      deletes mark "
-<			{not in Vi}
 
 :delm[arks]!		Delete all marks for the current buffer, but not marks
 			A-Z or 0-9.
-			{not in Vi}
 
 A mark is not visible in any way.  It is just a position in the file that is
 remembered.  Do not confuse marks with named registers, they are totally
 unrelated.
 
@@ -852,15 +845,15 @@ time, etc.  Use the "r" flag in 'viminfo' to specify files for which no
 Numbered mark should be stored.  See |viminfo-file-marks|.
 
 
 							*'[* *`[*
 '[  `[			To the first character of the previously changed
-			or yanked text.  {not in Vi}
+			or yanked text.
 
 							*']* *`]*
 ']  `]			To the last character of the previously changed or
-			yanked text.  {not in Vi}
+			yanked text.
 
 After executing an operator the Cursor is put at the beginning of the text
 that was operated upon.  After a put command ("p" or "P") the cursor is
 sometimes placed at the first inserted line and sometimes on the last inserted
 character.  The four commands above put the cursor at either end.  Example:
@@ -874,19 +867,19 @@ was made yet in the current file.
 
 							*'<* *`<*
 '<  `<			To the first line or character of the last selected
 			Visual area in the current buffer.  For block mode it
 			may also be the last character in the first line (to
-			be able to define the block).  {not in Vi}.
+			be able to define the block).
 
 							*'>* *`>*
 '>  `>			To the last line or character of the last selected
 			Visual area in the current buffer.  For block mode it
 			may also be the first character of the last line (to
 			be able to define the block).  Note that 'selection'
 			applies, the position may be just after the Visual
-			area.  {not in Vi}.
+			area.
 
 							*''* *``*
 ''  ``			To the position before the latest jump, or where the
 			last "m'" or "m`" command was given.  Not set when the
 			|:keepjumps| command modifier was used.
@@ -898,63 +891,60 @@ was made yet in the current file.
 			line.  See |last-position-jump| for how to use this
 			for each opened file.
 			Only one position is remembered per buffer, not one
 			for each window.  As long as the buffer is visible in
 			a window the position won't be changed.
-			{not in Vi}.
 
 							*'^* *`^*
 '^  `^			To the position where the cursor was the last time
 			when Insert mode was stopped.  This is used by the
 			|gi| command.  Not set when the |:keepjumps| command
-			modifier was used.  {not in Vi}
+			modifier was used.
 
 							*'.* *`.*
 '.  `.			To the position where the last change was made.  The
 			position is at or near where the change started.
 			Sometimes a command is executed as several changes,
 			then the position can be near the end of what the
 			command changed.  For example when inserting a word,
 			the position will be on the last character.
 			To jump to older changes use |g;|.
-			{not in Vi}
 
 							*'(* *`(*
 '(  `(			To the start of the current sentence, like the |(|
-			command.  {not in Vi}
+			command.
 
 							*')* *`)*
 ')  `)			To the end of the current sentence, like the |)|
-			command.  {not in Vi}
+			command.
 
 							*'{* *`{*
 '{  `{			To the start of the current paragraph, like the |{|
-			command.  {not in Vi}
+			command.
 
 							*'}* *`}*
 '}  `}			To the end of the current paragraph, like the |}|
-			command.  {not in Vi}
+			command.
 
 These commands are not marks themselves, but jump to a mark:
 
 							*]'*
 ]'			[count] times to next line with a lowercase mark below
 			the cursor, on the first non-blank character in the
-			line. {not in Vi}
+			line.
 
 							*]`*
 ]`			[count] times to lowercase mark after the cursor. {not
 			in Vi}
 
 							*['*
 ['			[count] times to previous line with a lowercase mark
 			before the cursor, on the first non-blank character in
-			the line. {not in Vi}
+			the line.
 
 							*[`*
 [`			[count] times to lowercase mark before the cursor.
-			{not in Vi}
 
 
 :loc[kmarks] {command}					*:loc* *:lockmarks*
 			Execute {command} without adjusting marks.  This is
 			useful when changing text in a way that the line count
@@ -1028,27 +1018,23 @@ following commands are "jump" commands: "'", "`", "G", "/", "?", "n", "N",
 commands that start editing a new file.
 
 							*CTRL-O*
 CTRL-O			Go to [count] Older cursor position in jump list
 			(not a motion command).
-			{not in Vi}
 			{not available without the |+jumplist| feature}
 
 <Tab>		or					*CTRL-I* *<Tab>*
 CTRL-I			Go to [count] newer cursor position in jump list
 			(not a motion command).
-			{not in Vi}
 			{not available without the |+jumplist| feature}
 
 							*:ju* *:jumps*
 :ju[mps]		Print the jump list (not a motion command).
-			{not in Vi}
 			{not available without the |+jumplist| feature}
 
 							*:cle* *:clearjumps*
 :cle[arjumps]		Clear the jump list of the current window.
-			{not in Vi}
 			{not available without the |+jumplist| feature}
 
 							*jumplist*
 Jumps are remembered in a jump list.  With the CTRL-O and CTRL-I command you
 can go to cursor positions before older jumps, and back again.  Thus you can
@@ -1129,18 +1115,16 @@ also those that have been undone:
 g;			Go to [count] older position in change list.
 			If [count] is larger than the number of older change
 			positions go to the oldest change.
 			If there is no older change an error message is given.
 			(not a motion command)
-			{not in Vi}
 			{not available without the |+jumplist| feature}
 
 							*g,* *E663*
 g,			Go to [count] newer cursor position in change list.
 			Just like |g;| but in the opposite direction.
 			(not a motion command)
-			{not in Vi}
 			{not available without the |+jumplist| feature}
 
 When using a count you jump as far back or forward as possible.  Thus you can
 use "999g;" to go to the first change for which the position is still
 remembered.  The number of entries in the change list is fixed and is the same
@@ -1227,23 +1211,23 @@ remembered.
 			percentage down the file |N%|.  Using '%' on
 			#if/#else/#endif makes the movement linewise.
 
 						*[(*
 [(			go to [count] previous unmatched '('.
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 						*[{*
 [{			go to [count] previous unmatched '{'.
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 						*])*
 ])			go to [count] next unmatched ')'.
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 						*]}*
 ]}			go to [count] next unmatched '}'.
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 The above four commands can be used to go to the start or end of the current
 code block.  It is like doing "%" on the '(', ')', '{' or '}' at the other
 end of the code block, but you can do this from anywhere in the code block.
 Very useful for C programs.  Example: When standing on "case x:", "[{" will
@@ -1252,29 +1236,29 @@ bring you back to the switch statement.
 						*]m*
 ]m			Go to [count] next start of a method (for Java or
 			similar structured language).  When not before the
 			start of a method, jump to the start or end of the
 			class.  When no '{' is found after the cursor, this is
-			an error.  |exclusive| motion. {not in Vi}
+			an error.  |exclusive| motion.
 						*]M*
 ]M			Go to [count] next end of a method (for Java or
 			similar structured language).  When not before the end
 			of a method, jump to the start or end of the class.
 			When no '}' is found after the cursor, this is an
-			error. |exclusive| motion. {not in Vi}
+			error. |exclusive| motion.
 						*[m*
 [m			Go to [count] previous start of a method (for Java or
 			similar structured language).  When not after the
 			start of a method, jump to the start or end of the
 			class.  When no '{' is found before the cursor this is
-			an error. |exclusive| motion. {not in Vi}
+			an error. |exclusive| motion.
 						*[M*
 [M			Go to [count] previous end of a method (for Java or
 			similar structured language).  When not after the
 			end of a method, jump to the start or end of the
 			class.  When no '}' is found before the cursor this is
-			an error. |exclusive| motion. {not in Vi}
+			an error. |exclusive| motion.
 
 The above two commands assume that the file contains a class with methods.
 The class definition is surrounded in '{' and '}'.  Each method in the class
 is also surrounded with '{' and '}'.  This applies to the Java language.  The
 file looks like this: >
@@ -1293,27 +1277,27 @@ the start of "method_two()" (obviously this is much more useful when the
 method is long!).  Using "2[m" will jump to the start of "method_one()".
 Using "3[m" will jump to the start of the class.
 
 						*[#*
 [#			go to [count] previous unmatched "#if" or "#else".
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 						*]#*
 ]#			go to [count] next unmatched "#else" or "#endif".
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 These two commands work in C programs that contain #if/#else/#endif
 constructs.  It brings you to the start or end of the #if/#else/#endif where
 the current line is included.  You can then use "%" to go to the matching line.
 
 						*[star* *[/*
 [*  or  [/		go to [count] previous start of a C comment "/*".
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 						*]star* *]/*
 ]*  or  ]/		go to [count] next end of a C comment "*/".
-			|exclusive| motion. {not in Vi}
+			|exclusive| motion.
 
 
 						*H*
 H			To line [count] from top (Home) of window (default:
 			first line on the window) on the first non-blank
@@ -1337,8 +1321,8 @@ L			To line [count] from bottom of window (default: Last
 			visible line.
 
 <LeftMouse>		Moves to the position on the screen where the mouse
 			click is |exclusive|.  See also |<LeftMouse>|.  If the
 			position is in a status line, that window is made the
-			active window and the cursor is not moved.  {not in Vi}
+			active window and the cursor is not moved.
 
  vim:tw=78:ts=8:noet:ft=help:norl:
diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index 6a73180d0..c17842f3c 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt

 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
 
 
@@ -6161,13 +6161,11 @@ A jump table for the options with a short description can be found at |Q_op|.
 			local to window
 	Number of lines to scroll with CTRL-U and CTRL-D commands.  Will be
 	set to half the number of lines in the window when the window size
 	changes.  If you give a count to the CTRL-U or CTRL-D command it will
 	be used as the new value for 'scroll'.  Reset to half the window
-	height with ":set scroll=0".   {Vi is a bit different: 'scroll' gives
-	the number of screen lines instead of file lines, makes a difference
-	when lines wrap}
+	height with ":set scroll=0".
 
 			*'scrollbind'* *'scb'* *'noscrollbind'* *'noscb'*
 'scrollbind' 'scb'	boolean  (default off)
 			local to window
 	See also |scroll-binding|.  When this option is set, the current
@@ -7785,11 +7783,11 @@ A jump table for the options with a short description can be found at |Q_op|.
 	NOTE: 'ttimeout' is reset when 'compatible' is set.
 
 						*'timeoutlen'* *'tm'*
 'timeoutlen' 'tm'	number	(default 1000)
 			global
-			{not in all versions of Vi}
+
 						*'ttimeoutlen'* *'ttm'*
 'ttimeoutlen' 'ttm'	number	(default -1, set to 100 in |defaults.vim|)
 			global
 	The time in milliseconds that is waited for a key code or mapped key
 	sequence to complete.  Also used for CTRL-\ CTRL-N and CTRL-\ CTRL-G
@@ -7988,13 +7986,14 @@ A jump table for the options with a short description can be found at |Q_op|.
 			much faster and more precise.  Your xterm must at
 			least at patchlevel 88 / XFree 3.3.3 for this to
 			work.  See below for how Vim detects this
 			automatically.
 							*netterm-mouse*
-	   netterm	NetTerm mouse handling.  The mouse generates
+	   netterm	NetTerm mouse handling.  A left mouse click generates
 			"<Esc>}r,c<CR>", where "r,c" are two decimal numbers
-			for the row and column.
+			for the row and column.  No other mouse events are
+			supported.
 							*dec-mouse*
 	   dec		DEC terminal mouse handling.  The mouse generates a
 			rather complex sequence, starting with "<Esc>[".
 			This is also available for an Xterm, if it was
 			configured with "--enable-dec-locator".
@@ -8651,11 +8650,10 @@ A jump table for the options with a short description can be found at |Q_op|.
 	'window' minus two lines, with a minimum of one.
 	When 'window' is equal to 'lines' minus one CTRL-F and CTRL-B scroll
 	in a much smarter way, taking care of wrapping lines.
 	When resizing the Vim window, the value is smaller than 1 or more than
 	or equal to 'lines' it will be set to 'lines' minus 1.
-	{Vi also uses the option to specify the number of displayed lines}
 
 						*'winheight'* *'wh'* *E591*
 'winheight' 'wh'	number	(default 1)
 			global
 			{not available when compiled without the |+windows|
diff --git a/runtime/doc/pattern.txt b/runtime/doc/pattern.txt
index fc4502d0c..8babf0b23 100644
--- a/runtime/doc/pattern.txt
+++ b/runtime/doc/pattern.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -76,28 +76,28 @@ N			Repeat the latest "/" or "?" [count] times in
 				   current line
 				3. the non-blank word under the cursor
 				4. the first non-blank word after the cursor,
 				   in the current line
 			Only whole keywords are searched for, like with the
-			command "/\<keyword\>".  |exclusive|  {not in Vi}
+			command "/\<keyword\>".  |exclusive| 
 			'ignorecase' is used, 'smartcase' is not.
 
 							*#*
 #			Same as "*", but search backward.  The pound sign
 			(character 163) also works.  If the "#" key works as
 			backspace, try using "stty erase <BS>" before starting
-			Vim (<BS> is CTRL-H or a real backspace).  {not in Vi}
+			Vim (<BS> is CTRL-H or a real backspace).
 
 							*gstar*
 g*			Like "*", but don't put "\<" and "\>" around the word.
 			This makes the search also find matches that are not a
-			whole word.  {not in Vi}
+			whole word.
 
 							*g#*
 g#			Like "#", but don't put "\<" and "\>" around the word.
 			This makes the search also find matches that are not a
-			whole word.  {not in Vi}
+			whole word.
 
 							*gd*
 gd			Goto local Declaration.  When the cursor is on a local
 			variable, this command will jump to its declaration.
 			First Vim searches for the start of the current
@@ -111,26 +111,25 @@ gd			Goto local Declaration.  When the cursor is on a local
 			really check the syntax, it only searches for a match
 			with the keyword.  If included files also need to be
 			searched use the commands listed in |include-search|.
 			After this command |n| searches forward for the next
 			match (not backward).
-			{not in Vi}
 
 							*gD*
 gD			Goto global Declaration.  When the cursor is on a
 			global variable that is defined in the file, this
 			command will jump to its declaration.  This works just
 			like "gd", except that the search for the keyword
-			always starts in line 1.  {not in Vi}
+			always starts in line 1.
 
 							*1gd*
 1gd			Like "gd", but ignore matches inside a {} block that
-			ends before the cursor position. {not in Vi}
+			ends before the cursor position.
 
 							*1gD*
 1gD			Like "gD", but ignore matches inside a {} block that
-			ends before the cursor position. {not in Vi}
+			ends before the cursor position.
 
 							*CTRL-C*
 CTRL-C			Interrupt current (search) command.  Use CTRL-Break on
 			MS-DOS |dos-CTRL-Break|.
 			In Normal mode, any pending command is aborted.
@@ -169,11 +168,11 @@ compatibility.  For the |:s| command the "e" flag can be used to avoid the
 error message |:s_flags|.
 
 					*search-offset* *{offset}*
 These commands search for the specified pattern.  With "/" and "?" an
 additional offset may be given.  There are two types of offsets: line offsets
-and character offsets.  {the character offsets are not in Vi}
+and character offsets.
 
 The offset gives the cursor position relative to the found match:
     [num]	[num] lines downwards, in column 1
     +[num]	[num] lines downwards, in column 1
     -[num]	[num] lines upwards, in column 1
@@ -308,18 +307,10 @@ the "*" is under your right hand middle finger (search to the right and down).
 In very rare cases a regular expression is used recursively.  This can happen
 when executing a pattern takes a long time and when checking for messages on
 channels a callback is invoked that also uses a pattern or an autocommand is
 triggered.  In most cases this should be fine, but if a pattern is in use when
 it's used again it fails.  Usually this means there is something wrong with
-the pattern.
-
-								*E956*
-In very rare cases a regular expression is used recursively.  This can happen
-when executing a pattern takes a long time and when checking for messages on
-channels a callback is invoked that also uses a pattern or an autocommand is
-triggered.  In most cases this should be fine, but if a pattern is in use when
-it's used again it fails.  Usually this means there is something wrong with
 the pattern.
 
 ==============================================================================
 2. The definition of a pattern		*search-pattern* *pattern* *[pattern]*
 					*regular-expression* *regexp* *Pattern*
@@ -453,34 +444,32 @@ Overview of multi items.				*/multi* *E61* *E62*
 More explanation and examples below, follow the links.		*E64* *E871*
 
 	  multi ~
      'magic' 'nomagic'	matches of the preceding atom ~
 |/star|	*	\*	0 or more	as many as possible
-|/\+|	\+	\+	1 or more	as many as possible (*)
-|/\=|	\=	\=	0 or 1		as many as possible (*)
-|/\?|	\?	\?	0 or 1		as many as possible (*)
-
-|/\{|	\{n,m}	\{n,m}	n to m		as many as possible (*)
-	\{n}	\{n}	n		exactly (*)
-	\{n,}	\{n,}	at least n	as many as possible (*)
-	\{,m}	\{,m}	0 to m		as many as possible (*)
-	\{}	\{}	0 or more	as many as possible (same as *) (*)
-
-|/\{-|	\{-n,m}	\{-n,m}	n to m		as few as possible (*)
-	\{-n}	\{-n}	n		exactly (*)
-	\{-n,}	\{-n,}	at least n	as few as possible (*)
-	\{-,m}	\{-,m}	0 to m		as few as possible (*)
-	\{-}	\{-}	0 or more	as few as possible (*)
+|/\+|	\+	\+	1 or more	as many as possible
+|/\=|	\=	\=	0 or 1		as many as possible
+|/\?|	\?	\?	0 or 1		as many as possible
+
+|/\{|	\{n,m}	\{n,m}	n to m		as many as possible
+	\{n}	\{n}	n		exactly
+	\{n,}	\{n,}	at least n	as many as possible
+	\{,m}	\{,m}	0 to m		as many as possible
+	\{}	\{}	0 or more	as many as possible (same as *)
+
+|/\{-|	\{-n,m}	\{-n,m}	n to m		as few as possible
+	\{-n}	\{-n}	n		exactly
+	\{-n,}	\{-n,}	at least n	as few as possible
+	\{-,m}	\{-,m}	0 to m		as few as possible
+	\{-}	\{-}	0 or more	as few as possible
 
 							*E59*
-|/\@>|	\@>	\@>	1, like matching a whole pattern (*)
-|/\@=|	\@=	\@=	nothing, requires a match |/zero-width| (*)
-|/\@!|	\@!	\@!	nothing, requires NO match |/zero-width| (*)
-|/\@<=|	\@<=	\@<=	nothing, requires a match behind |/zero-width| (*)
-|/\@<!|	\@<!	\@<!	nothing, requires NO match behind |/zero-width| (*)
-
-(*) {not in Vi}
+|/\@>|	\@>	\@>	1, like matching a whole pattern
+|/\@=|	\@=	\@=	nothing, requires a match |/zero-width|
+|/\@!|	\@!	\@!	nothing, requires NO match |/zero-width|
+|/\@<=|	\@<=	\@<=	nothing, requires a match behind |/zero-width|
+|/\@<!|	\@<!	\@<!	nothing, requires NO match behind |/zero-width|
 
 
 Overview of ordinary atoms.				*/ordinary-atom*
 More explanation and examples below, follow the links.
 
@@ -505,11 +494,11 @@ More explanation and examples below, follow the links.
 |/\%'m|	\%'m	\%'m	mark m position |/zero-width|
 |/\%l|	\%23l	\%23l	in line 23 |/zero-width|
 |/\%c|	\%23c	\%23c	in column 23 |/zero-width|
 |/\%v|	\%23v	\%23v	in virtual column 23 |/zero-width|
 
-Character classes {not in Vi}:				*/character-classes*
+Character classes:					*/character-classes*
       magic   nomagic	matches ~
 |/\i|	\i	\i	identifier character (see 'isident' option)
 |/\I|	\I	\I	like "\i", but excluding digits
 |/\k|	\k	\k	keyword character (see 'iskeyword' option)
 |/\K|	\K	\K	like "\k", but excluding digits
@@ -544,11 +533,11 @@ Character classes {not in Vi}:				*/character-classes*
 |/\t|	\t	\t	<Tab>
 |/\r|	\r	\r	<CR>
 |/\b|	\b	\b	<BS>
 |/\n|	\n	\n	end-of-line
 |/~|	~	\~	last given substitute string
-|/\1|	\1	\1	same string as matched by first \(\) {not in Vi}
+|/\1|	\1	\1	same string as matched by first \(\)
 |/\2|	\2	\2	Like "\1", but uses second \(\)
 	   ...
 |/\9|	\9	\9	Like "\1", but uses ninth \(\)
 								*E68*
 |/\z1|	\z1	\z1	only for syntax highlighting, see |:syn-ext-match|
@@ -622,24 +611,23 @@ overview.
 	will match as many as possible, this first skips over all lines until
 	the end of the file and then tries matching "END", backing up one
 	character at a time.
 
 							*/\+*
-\+	Matches 1 or more of the preceding atom, as many as possible. {not in
-	Vi}
+\+	Matches 1 or more of the preceding atom, as many as possible.
 	Example		matches ~
 	^.\+$		any non-empty line
 	\s\+		white space of at least one character
 
 							*/\=*
-\=	Matches 0 or 1 of the preceding atom, as many as possible. {not in Vi}
+\=	Matches 0 or 1 of the preceding atom, as many as possible.
 	Example		matches ~
 	foo\=		"fo" and "foo"
 
 							*/\?*
 \?	Just like \=.  Cannot be used when searching backwards with the "?"
-	command. {not in Vi}
+	command.
 
 					*/\{* *E60* *E554* *E870*
 \{n,m}	Matches n to m of the preceding atom, as many as possible
 \{n}	Matches n of the preceding atom
 \{n,}	Matches at least n of the preceding atom, as many as possible
@@ -649,11 +637,10 @@ overview.
 \{-n,m}	matches n to m of the preceding atom, as few as possible
 \{-n}	matches n of the preceding atom
 \{-n,}	matches at least n of the preceding atom, as few as possible
 \{-,m}	matches 0 to m of the preceding atom, as few as possible
 \{-}	matches 0 or more of the preceding atom, as few as possible
-	{Vi does not have any of these}
 
 	n and m are positive decimal numbers or zero
 								*non-greedy*
 	If a "-" appears immediately after the "{", then a shortest match
 	first algorithm is used (see example below).  In particular, "\{-}" is
@@ -672,11 +659,11 @@ overview.
 	a[bc]*[cd]		"abcd" in "abcd"
 
 	The } may optionally be preceded with a backslash: \{n,m\}.
 
 							*/\@=*
-\@=	Matches the preceding atom with zero width. {not in Vi}
+\@=	Matches the preceding atom with zero width.
 	Like "(?=pattern)" in Perl.
 	Example			matches ~
 	foo\(bar\)\@=		"foo" in "foobar"
 	foo\(bar\)\@=foo	nothing
 							*/zero-width*
@@ -692,11 +679,11 @@ overview.
 	braces.
 
 
 							*/\@!*
 \@!	Matches with zero width if the preceding atom does NOT match at the
-	current position. |/zero-width| {not in Vi}
+	current position. |/zero-width|
 	Like "(?!pattern)" in Perl.
 	Example			matches ~
 	foo\(bar\)\@!		any "foo" not followed by "bar"
 	a.\{-}p\@!		"a", "ap", "app", "appp", etc. not immediately
 				followed by a "p"
@@ -722,11 +709,11 @@ overview.
 	reject the pattern.  When there is no match any "foo" will be found.
 	The "\zs" is to have the match start just before "foo".
 
 							*/\@<=*
 \@<=	Matches with zero width if the preceding atom matches just before what
-	follows. |/zero-width| {not in Vi}
+	follows. |/zero-width|
 	Like "(?<=pattern)" in Perl, but Vim allows non-fixed-width patterns.
 	Example			matches ~
 	\(an\_s\+\)\@<=file	"file" after "an" and white space or an
 				end-of-line
 	For speed it's often much better to avoid this multi.  Try using "\zs"
@@ -766,11 +753,11 @@ overview.
 
 							*/\@<!*
 \@<!	Matches with zero width if the preceding atom does NOT match just
 	before what follows.  Thus this matches if there is no position in the
 	current or previous line where the atom matches such that it ends just
-	before what follows.  |/zero-width| {not in Vi}
+	before what follows.  |/zero-width|
 	Like "(?<!pattern)" in Perl, but Vim allows non-fixed-width patterns.
 	The match with the preceding atom is made to end just before the match
 	with what follows, thus an atom that ends in ".*" will work.
 	Warning: This can be slow (because many positions need to be checked
 	for a match).  Use a limit if you can, see below.
@@ -782,11 +769,11 @@ overview.
 	Like "\@<!" but only look back 123 bytes. This avoids trying lots of
 	matches that are known to fail and make executing the pattern very
 	slow.
 
 							*/\@>*
-\@>	Matches the preceding atom like matching a whole pattern. {not in Vi}
+\@>	Matches the preceding atom like matching a whole pattern.
 	Like "(?>pattern)" in Perl.
 	Example		matches ~
 	\(a*\)\@>a	nothing (the "a*" takes all the "a"'s, there can't be
 			another one following)
 
@@ -861,30 +848,30 @@ $	At end of pattern or in front of "\|", "\)" or "\n" ('magic' on):
 	Can be used multiple times, the last one encountered in a matching
 	branch is used.  Example: >
 		/\(.\{-}\zsFab\)\{3}
 <	Finds the third occurrence of "Fab".
 	This cannot be followed by a multi. *E888*
-	{not in Vi} {not available when compiled without the |+syntax| feature}
+	{not available when compiled without the |+syntax| feature}
 							*/\ze*
 \ze	Matches at any position, and sets the end of the match there: The
 	previous char is the last char of the whole match. |/zero-width|
 	Can be used multiple times, the last one encountered in a matching
 	branch is used.
 	Example: "end\ze\(if\|for\)" matches the "end" in "endif" and
 	"endfor".
 	This cannot be followed by a multi. |E888|
-	{not in Vi} {not available when compiled without the |+syntax| feature}
+	{not available when compiled without the |+syntax| feature}
 
 						*/\%^* *start-of-file*
 \%^	Matches start of the file.  When matching with a string, matches the
-	start of the string. {not in Vi}
+	start of the string.
 	For example, to find the first "VIM" in a file: >
 		/\%^\_.\{-}\zsVIM
 <
 						*/\%$* *end-of-file*
 \%$	Matches end of the file.  When matching with a string, matches the
-	end of the string. {not in Vi}
+	end of the string.
 	Note that this does NOT find the last "VIM" in a file: >
 		/VIM\_.\{-}\%$
 <	It will find the next VIM, because the part after it will always
 	match.  This one will find the last "VIM" in the file: >
 		/VIM\ze\(\(VIM\)\@!\_.\)*\%$
@@ -904,11 +891,11 @@ $	At end of pattern or in front of "\|", "\)" or "\n" ('magic' on):
 <	would match "foo bar" if the Visual selection continues after the "r".
 	Only works for the current buffer.
 
 						*/\%#* *cursor-position*
 \%#	Matches with the cursor position.  Only works when matching in a
-	buffer displayed in a window. {not in Vi}
+	buffer displayed in a window.
 	WARNING: When the cursor is moved after the pattern was used, the
 	result becomes invalid.  Vim doesn't automatically update the matches.
 	This is especially relevant for syntax highlighting and 'hlsearch'.
 	In other words: When the cursor moves the display isn't updated for
 	this change.  An update is done for lines which are changed (the whole
@@ -925,21 +912,20 @@ $	At end of pattern or in front of "\|", "\)" or "\n" ('magic' on):
 	Example, to highlight the text from mark 's to 'e: >
 		/.\%>'s.*\%<'e..
 <	Note that two dots are required to include mark 'e in the match.  That
 	is because "\%<'e" matches at the character before the 'e mark, and
 	since it's a |/zero-width| match it doesn't include that character.
-	{not in Vi}
 	WARNING: When the mark is moved after the pattern was used, the result
 	becomes invalid.  Vim doesn't automatically update the matches.
 	Similar to moving the cursor for "\%#" |/\%#|.
 
 						*/\%l* */\%>l* */\%<l* *E951*
 \%23l	Matches in a specific line.
 \%<23l	Matches above a specific line (lower line number).
 \%>23l	Matches below a specific line (higher line number).
 	These three can be used to match specific lines in a buffer.  The "23"
-	can be any line number.  The first line is 1. {not in Vi}
+	can be any line number.  The first line is 1.
 	WARNING: When inserting or deleting lines Vim does not automatically
 	update the matches.  This means Syntax highlighting quickly becomes
 	wrong.
 	Example, to highlight the line where the cursor currently is: >
 		:exe '/\%' . line(".") . 'l.*'
@@ -951,11 +937,11 @@ $	At end of pattern or in front of "\|", "\)" or "\n" ('magic' on):
 \%<23c	Matches before a specific column.
 \%>23c	Matches after a specific column.
 	These three can be used to match specific columns in a buffer or
 	string.  The "23" can be any column number.  The first column is 1.
 	Actually, the column is the byte number (thus it's not exactly right
-	for multi-byte characters).  {not in Vi}
+	for multi-byte characters).
 	WARNING: When inserting or deleting text Vim does not automatically
 	update the matches.  This means Syntax highlighting quickly becomes
 	wrong.
 	Example, to highlight the column where the cursor currently is: >
 		:exe '/\%' . col(".") . 'c'
@@ -973,11 +959,11 @@ $	At end of pattern or in front of "\|", "\)" or "\n" ('magic' on):
 	or string.  When not matching with a buffer in a window, the option
 	values of the current window are used (e.g., 'tabstop').
 	The "23" can be any column number.  The first column is 1.
 	Note that some virtual column positions will never match, because they
 	are halfway through a tab or other character that occupies more than
-	one screen character.  {not in Vi}
+	one screen character.
 	WARNING: When inserting or deleting text Vim does not automatically
 	update highlighted matches.  This means Syntax highlighting quickly
 	becomes wrong.
 	Example, to highlight all the characters after virtual column 72: >
 		/\%>72v.*
@@ -996,11 +982,11 @@ $	At end of pattern or in front of "\|", "\)" or "\n" ('magic' on):
 		/.*\%17v
 <	Column 17 is highlighted by 'hlsearch' because there is another match
 	where ".*" matches zero characters.
 <
 
-Character classes: {not in Vi}
+Character classes:
 \i	identifier character (see 'isident' option)	*/\i*
 \I	like "\i", but excluding digits			*/\I*
 \k	keyword character (see 'iskeyword' option)	*/\k*
 \K	like "\k", but excluding digits			*/\K*
 \f	file name character (see 'isfname' option)	*/\f*
@@ -1056,11 +1042,11 @@ match ASCII characters, as indicated by the range.
 \(\)	A pattern enclosed by escaped parentheses.	*/\(* */\(\)* */\)*
 	E.g., "\(^a\)" matches 'a' at the start of a line.
 	*E51* *E54* *E55* *E872* *E873*
 
 \1      Matches the same string that was matched by	*/\1* *E65*
-	the first sub-expression in \( and \). {not in Vi}
+	the first sub-expression in \( and \).
 	Example: "\([a-z]\).\1" matches "ata", "ehe", "tot", etc.
 \2      Like "\1", but uses second sub-expression,	*/\2*
    ...							*/\3*
 \9      Like "\1", but uses ninth sub-expression.	*/\9*
 	Note: The numbering of groups is done based on which "\(" comes first
@@ -1068,11 +1054,10 @@ match ASCII characters, as indicated by the range.
 	first.
 
 \%(\)	A pattern enclosed by escaped parentheses.	*/\%(\)* */\%(* *E53*
 	Just like \(\), but without counting it as a sub-expression.  This
 	allows using more groups and it's a little bit faster.
-	{not in Vi}
 
 x	A single character, with no special meaning, matches itself
 
 							*/\* */\\*
 \x	A backslash followed by a single character, with no special meaning,
@@ -1169,20 +1154,20 @@ x	A single character, with no special meaning, matches itself
 							  */\]*
 	- To include a literal ']', '^', '-' or '\' in the collection, put a
 	  backslash before it: "[xyz\]]", "[\^xyz]", "[xy\-z]" and "[xyz\\]".
 	  (Note: POSIX does not support the use of a backslash this way).  For
 	  ']' you can also make it the first character (following a possible
-	  "^"):  "[]xyz]" or "[^]xyz]" {not in Vi}.
+	  "^"):  "[]xyz]" or "[^]xyz]".
 	  For '-' you can also make it the first or last character: "[-xyz]",
 	  "[^-xyz]" or "[xyz-]".  For '\' you can also let it be followed by
 	  any character that's not in "^]-\bdertnoUux".  "[\xyz]" matches '\',
 	  'x', 'y' and 'z'.  It's better to use "\\" though, future expansions
 	  may use other characters after '\'.
 	- Omitting the trailing ] is not considered an error. "[]" works like
 	  "[]]", it matches the ']' character.
 	- The following translations are accepted when the 'l' flag is not
-	  included in 'cpoptions' {not in Vi}:
+	  included in 'cpoptions':
 		\e	<Esc>
 		\t	<Tab>
 		\r	<CR>	(NOT end-of-line!)
 		\b	<BS>
 		\n	line break, see above |/[\n]|
@@ -1259,11 +1244,11 @@ Technical detail:				*NL-used-for-Nul*
 they are shown as "^@".  The translation is done when reading and writing
 files.  To match a <Nul> with a search pattern you can just enter CTRL-@ or
 "CTRL-V 000".  This is probably just what you expect.  Internally the
 character is replaced with a <NL> in the search pattern.  What is unusual is
 that typing CTRL-V CTRL-J also inserts a <NL>, thus also searches for a <Nul>
-in the file.  {Vi cannot handle <Nul> characters in the file at all}
+in the file.
 
 						*CR-used-for-NL*
 When 'fileformat' is "mac", <NL> characters in the file are stored as <CR>
 characters internally.  In the text they are shown as "^J".  Otherwise this
 works similar to the usage of <NL> for a <Nul>.
diff --git a/runtime/doc/pi_gzip.txt b/runtime/doc/pi_gzip.txt
index 6017efa89..1631e2e8d 100644
--- a/runtime/doc/pi_gzip.txt
+++ b/runtime/doc/pi_gzip.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -11,12 +11,10 @@ Editing compressed files with Vim		*gzip* *bzip2* *compress*
 The functionality mentioned here is a |standard-plugin|.
 This plugin is only available if 'compatible' is not set.
 You can avoid loading this plugin by setting the "loaded_gzip" variable: >
 	:let loaded_gzip = 1
 
-{Vi does not have any of this}
-
 ==============================================================================
 1. Autocommands						*gzip-autocmd*
 
 The plugin installs autocommands to intercept reading and writing of files
 with these extensions:
diff --git a/runtime/doc/pi_netrw.txt b/runtime/doc/pi_netrw.txt
index 2b7e56575..709b8477c 100644
--- a/runtime/doc/pi_netrw.txt
+++ b/runtime/doc/pi_netrw.txt

 
 	    ------------------------------------------------
 	    NETRW REFERENCE MANUAL    by Charles E. Campbell
 	    ------------------------------------------------
 Author:  Charles E. Campbell  <NdrOchip@ScampbellPfamily.AbizM>
@@ -112,12 +112,10 @@ Copyright: Copyright (C) 2017 Charles E Campbell    *netrw-copyright*
 11. Debugging Netrw Itself................................|netrw-debug|
 12. History...............................................|netrw-history|
 13. Todo..................................................|netrw-todo|
 14. Credits...............................................|netrw-credits|
 
-{Vi does not have any of this}
-
 ==============================================================================
 2. Starting With Netrw					*netrw-start* {{{1
 
 Netrw makes reading files, writing files, browsing over a network, and
 local browsing easy!  First, make sure that you have plugins enabled, so
diff --git a/runtime/doc/quickfix.txt b/runtime/doc/quickfix.txt
index ef084fac5..6d9b34250 100644
--- a/runtime/doc/quickfix.txt
+++ b/runtime/doc/quickfix.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -14,12 +14,10 @@ This subject is introduced in section |30.1| of the user manual.
 6. Selecting a compiler			|compiler-select|
 7. The error format			|error-file-format|
 8. The directory stack			|quickfix-directory-stack|
 9. Specific error file formats		|errorformats|
 
-{Vi does not have any of these commands}
-
 The quickfix commands are not available when the |+quickfix| feature was
 disabled at compile time.
 
 =============================================================================
 1. Using QuickFix commands			*quickfix* *Quickfix* *E42*
@@ -500,11 +498,10 @@ EXECUTE A COMMAND IN ALL THE BUFFERS IN QUICKFIX OR LOCATION LIST:
 
 			Note: While this command is executing, the Syntax
 			autocommand event is disabled by adding it to
 			'eventignore'.  This considerably speeds up editing
 			each buffer.
-			{not in Vi}
 			Also see |:bufdo|, |:tabdo|, |:argdo|, |:windo|,
 			|:ldo|, |:cfdo| and |:lfdo|.
 
 							*:cfdo*
 :cfdo[!] {cmd}		Execute {cmd} in each file in the quickfix list.
@@ -513,11 +510,10 @@ EXECUTE A COMMAND IN ALL THE BUFFERS IN QUICKFIX OR LOCATION LIST:
 				:{cmd}
 				:cnfile
 				:{cmd}
 				etc.
 <			Otherwise it works the same as `:cdo`.
-			{not in Vi}
 
 							*:ldo*
 :ld[o][!] {cmd}		Execute {cmd} in each valid entry in the location list
 			for the current window.
 			It works like doing this: >
@@ -526,11 +522,10 @@ EXECUTE A COMMAND IN ALL THE BUFFERS IN QUICKFIX OR LOCATION LIST:
 				:lnext
 				:{cmd}
 				etc.
 <			Only valid entries in the location list are used.
 			Otherwise it works the same as `:cdo`.
-			{not in Vi}
 
 							*:lfdo*
 :lfdo[!] {cmd}		Execute {cmd} in each file in the location list for
 			the current window.
 			It works like doing this: >
@@ -538,11 +533,10 @@ EXECUTE A COMMAND IN ALL THE BUFFERS IN QUICKFIX OR LOCATION LIST:
 				:{cmd}
 				:lnfile
 				:{cmd}
 				etc.
 <			Otherwise it works the same as `:ldo`.
-			{not in Vi}
 
 =============================================================================
 2. The error window					*quickfix-window*
 
 					    *:cope* *:copen* *w:quickfix_title*
diff --git a/runtime/doc/quickref.txt b/runtime/doc/quickref.txt
index eb88bfd85..2718f5c30 100644
--- a/runtime/doc/quickref.txt
+++ b/runtime/doc/quickref.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 			    Quick reference guide
@@ -598,10 +598,11 @@ In Insert or Command-line mode:
 					  the help
 
 Short explanation of each option:		*option-list*
 'aleph'		  'al'	    ASCII code of the letter Aleph (Hebrew)
 'allowrevins'	  'ari'     allow CTRL-_ in Insert and Command-line mode
+'altkeymap'	  'akm'	    obsolete option for Farsi
 'ambiwidth'	  'ambw'    what to do with Unicode chars of ambiguous width
 'antialias'	  'anti'    Mac OS X: use smooth, antialiased fonts
 'autochdir'	  'acd'     change directory to the file in the current window
 'arabic'	  'arab'    for Arabic as a default second language
 'arabicshape'	  'arshape' do shaping for Arabic characters
@@ -697,10 +698,11 @@ Short explanation of each option:		*option-list*
 'fileformats'	  'ffs'     automatically detected values for 'fileformat'
 'fileignorecase'  'fic'     ignore case when using file names
 'filetype'	  'ft'	    type of file, used for autocommands
 'fillchars'	  'fcs'     characters to use for displaying special items
 'fixendofline'	  'fixeol'  make sure last line in file has <EOL>
+'fkmap'		  'fk'	    obsolete option for Farsi
 'foldclose'	  'fcl'     close a fold when the cursor leaves it
 'foldcolumn'	  'fdc'     width of the column used to indicate folds
 'foldenable'	  'fen'     set to display all folds open
 'foldexpr'	  'fde'     expression used when 'foldmethod' is "expr"
 'foldignore'	  'fdi'     ignore lines when 'foldmethod' is "indent"
@@ -765,10 +767,11 @@ Short explanation of each option:		*option-list*
 'keymap'	  'kmp'     name of a keyboard mapping
 'keymodel'	  'km'	    enable starting/stopping selection with keys
 'keywordprg'	  'kp'	    program to use for the "K" command
 'langmap'	  'lmap'    alphabetic characters for other language mode
 'langmenu'	  'lm'	    language to be used for the menus
+'langnoremap'	  'lnr'	    do not apply 'langmap' to mapped characters
 'langremap'	  'lrm'	    do apply 'langmap' to mapped characters
 'laststatus'	  'ls'	    tells when last window has status lines
 'lazyredraw'	  'lz'	    don't redraw while executing macros
 'linebreak'	  'lbr'     wrap long lines at a blank
 'lines'			    number of lines in the display
@@ -777,12 +780,10 @@ Short explanation of each option:		*option-list*
 'lispwords'	  'lw'	    words that change how lisp indenting works
 'list'			    show <Tab> and <EOL>
 'listchars'	  'lcs'     characters for displaying in list mode
 'loadplugins'	  'lpl'     load plugin scripts when starting up
 'luadll'		    name of the Lua dynamic library
-'mzschemedll'		    name of the MzScheme dynamic library
-'mzschemegcdll'		    name of the MzScheme dynamic library for GC
 'macatsui'		    Mac GUI: use ATSUI text drawing
 'magic'			    changes special characters in search patterns
 'makeef'	  'mef'     name of the errorfile for ":make"
 'makeencoding'	  'menc'    encoding of external make/grep commands
 'makeprg'	  'mp'	    program to use for the ":make" command
@@ -806,10 +807,12 @@ Short explanation of each option:		*option-list*
 'mousehide'	  'mh'	    hide mouse pointer while typing
 'mousemodel'	  'mousem'  changes meaning of mouse buttons
 'mouseshape'	  'mouses'  shape of the mouse pointer in different modes
 'mousetime'	  'mouset'  max time between mouse double-click
 'mzquantum'	  'mzq'     the interval between polls for MzScheme threads
+'mzschemedll'		    name of the MzScheme dynamic library
+'mzschemegcdll'		    name of the MzScheme dynamic library for GC
 'nrformats'	  'nf'	    number formats recognized for CTRL-A command
 'number'	  'nu'	    print the line number in front of each line
 'numberwidth'	  'nuw'     number of columns used for the line number
 'omnifunc'	  'ofu'     function for filetype-specific completion
 'opendevice'	  'odev'    allow reading/writing devices on MS-Windows
@@ -914,10 +917,11 @@ Short explanation of each option:		*option-list*
 'tabline'	  'tal'     custom format for the console tab pages line
 'tabpagemax'	  'tpm'     maximum number of tab pages for |-p| and "tab all"
 'tabstop'	  'ts'	    number of spaces that <Tab> in file uses
 'tagbsearch'	  'tbs'     use binary searching in tags files
 'tagcase'	  'tc'      how to handle case when searching in tags files
+'tagfunc'	  'tfu'	    function to get list of tag matches
 'taglength'	  'tl'	    number of significant characters for a tag
 'tagrelative'	  'tr'	    file names in tag file are relative
 'tags'		  'tag'     list of file names used by the tag command
 'tagstack'	  'tgst'    push tags onto the tag stack
 'tcldll'		    name of the Tcl dynamic library
diff --git a/runtime/doc/remote.txt b/runtime/doc/remote.txt
index 03e0d9759..2fe0297c5 100644
--- a/runtime/doc/remote.txt
+++ b/runtime/doc/remote.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -8,12 +8,10 @@ Vim client-server communication				*client-server*
 
 1. Common functionality		|clientserver|
 2. X11 specific items		|x11-clientserver|
 3. MS-Windows specific items	|w32-clientserver|
 
-{Vi does not have any of these commands}
-
 ==============================================================================
 1. Common functionality					*clientserver*
 
 When compiled with the |+clientserver| option, Vim can act as a command
 server.  It accepts messages from a client and executes them.  At the same
diff --git a/runtime/doc/repeat.txt b/runtime/doc/repeat.txt
index 27afb94ad..ed48cf9c4 100644
--- a/runtime/doc/repeat.txt
+++ b/runtime/doc/repeat.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -161,16 +161,15 @@ q			Stops recording.  (Implementation note: The 'q' that
 			{Vi: only in some versions} Future: Will execute the
 			register for each line in the address range.
 
 							*:@:*
 :[addr]@:		Repeat last command-line.  First set cursor at line
-			[addr] (default is current line).  {not in Vi}
+			[addr] (default is current line).
 
 :[addr]@							*:@@*
 :[addr]@@		Repeat the previous :@{0-9a-z"}.  First set cursor at
-			line [addr] (default is current line).  {Vi: only in
-			some versions}
+			line [addr] (default is current line).
 
 ==============================================================================
 4. Using Vim scripts					*using-scripts*
 
 For writing a Vim script, see chapter 41 of the user manual |usr_41.txt|.
@@ -185,11 +184,10 @@ For writing a Vim script, see chapter 41 of the user manual |usr_41.txt|.
 			them.
 			When used after |:global|, |:argdo|, |:windo|,
 			|:bufdo|, in a loop or when another command follows
 			the display won't be updated while executing the
 			commands.
-			{not in Vi}
 
 							*:ru* *:runtime*
 :ru[ntime][!] [where] {file} ..
 			Read Ex commands from {file} in each directory given
 			by 'runtimepath' and/or 'packpath'.  There is no error
@@ -228,11 +226,10 @@ For writing a Vim script, see chapter 41 of the user manual |usr_41.txt|.
 
 			When 'verbose' is one or higher, there is a message
 			when no file could be found.
 			When 'verbose' is two or higher, there is a message
 			about each searched file.
-			{not in Vi}
 
 							*:pa* *:packadd* *E919*
 :pa[ckadd][!] {name}	Search for an optional plugin directory in 'packpath'
 			and source any plugin files found.  The directory must
 			match:
@@ -321,11 +318,10 @@ For writing a Vim script, see chapter 41 of the user manual |usr_41.txt|.
 			If you set the 'encoding' option in your |.vimrc|,
 			`:scriptencoding` must be placed after that. E.g.: >
 				set encoding=utf-8
 				scriptencoding utf-8
 <
-			{not in Vi}
 
 :scriptv[ersion] {version}		*:scriptv* *:scriptversion*
 								*E999* *E984*
 			Specify the version of Vim for the lines that follow
 			in the same file.  Only applies at the toplevel of
@@ -339,12 +335,12 @@ For writing a Vim script, see chapter 41 of the user manual |usr_41.txt|.
 
 						*:scr* *:scriptnames*
 :scr[iptnames]		List all sourced script names, in the order they were
 			first sourced.  The number is used for the script ID
 			|<SID>|.
-			{not in Vi} {not available when compiled without the
-			|+eval| feature}
+			{not available when compiled without the |+eval|
+			feature}
 
 :scr[iptnames][!] {scriptId}			*:script*
 			Edit script {scriptId}.  Although ":scriptnames name"
 			works, using ":script name" is recommended.
 			When the current buffer can't be |abandon|ed and the !
@@ -356,11 +352,11 @@ For writing a Vim script, see chapter 41 of the user manual |usr_41.txt|.
 			the file.  If it is used after a |:try| but before the
 			matching |:finally| (if present), the commands
 			following the ":finally" up to the matching |:endtry|
 			are executed first.  This process applies to all
 			nested ":try"s in the script.  The outermost ":endtry"
-			then stops sourcing the script.  {not in Vi}
+			then stops sourcing the script.
 
 All commands and command sequences can be repeated by putting them in a named
 register and then executing it.  There are two ways to get the commands in the
 register:
 - Use the record command "q".  You type the commands once, and while they are
@@ -696,11 +692,10 @@ they are doing, Vim offers a debug mode.  This allows you to step through a
 sourced file or user function and set breakpoints.
 
 NOTE: The debugging mode is far from perfect.  Debugging will have side
 effects on how Vim works.  You cannot use it to debug everything.  For
 example, the display is messed up by the debugging messages.
-{Vi does not have a debug mode}
 
 An alternative to debug mode is setting the 'verbose' option.  With a bigger
 number it will give more verbose messages about what Vim is doing.
 
 
@@ -930,11 +925,10 @@ OBSCURE
 8. Profiling						*profile* *profiling*
 
 Profiling means that Vim measures the time that is spent on executing
 functions and/or scripts.  The |+profile| feature is required for this.
 It is only included when Vim was compiled with "huge" features.
-{Vi does not have profiling}
 
 You can also use the |reltime()| function to measure time.  This only requires
 the |+reltime| feature, which is present more often.
 
 For profiling syntax highlighting see |:syntime|.
diff --git a/runtime/doc/rileft.txt b/runtime/doc/rileft.txt
index f5ec8e876..206028341 100644
--- a/runtime/doc/rileft.txt
+++ b/runtime/doc/rileft.txt

 
 
 		  VIM REFERENCE MANUAL    by Avner Lottem
 					  updated by Nadim Shaikli
 
@@ -10,12 +10,10 @@ Right to Left display mode for Vim				*rileft*
 
 These functions were originally created by Avner Lottem:
    E-mail: alottem@iil.intel.com
    Phone:  +972-4-8307322
 
-{Vi does not have any of these commands}
-
 								*E26*
 {only available when compiled with the |+rightleft| feature}
 
 
 Introduction
diff --git a/runtime/doc/scroll.txt b/runtime/doc/scroll.txt
index 1415e2f91..86c471b4a 100644
--- a/runtime/doc/scroll.txt
+++ b/runtime/doc/scroll.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -43,13 +43,10 @@ CTRL-D			Scroll window Downwards in the buffer.  The number of
 			lines down in the file (if possible; when lines wrap
 			and when hitting the end of the file there may be a
 			difference).  When the cursor is on the last line of
 			the buffer nothing happens and a beep is produced.
 			See also 'startofline' option.
-			{difference from vi: Vim scrolls 'scroll' screen
-			lines, instead of file lines; makes a difference when
-			lines wrap}
 
 <S-Down>	or				*<S-Down>* *<kPageDown>*
 <PageDown>	or				*<PageDown>* *CTRL-F*
 CTRL-F			Scroll window [count] pages Forwards (downwards) in
 			the buffer.  See also 'startofline' option.
@@ -118,11 +115,11 @@ z<CR>			Redraw, line [count] at top of window (default
 			cursor line).  Put cursor at first non-blank in the
 			line.
 
 							*zt*
 zt			Like "z<CR>", but leave the cursor in the same
-			column.  {not in Vi}
+			column.
 
 							*zN<CR>*
 z{height}<CR>		Redraw, make window {height} lines tall.  This is
 			useful to make the number of lines small when screen
 			updating is very slow.  Cannot make the height more
@@ -134,20 +131,19 @@ z.			Redraw, line [count] at center of window (default
 			line.
 
 							*zz*
 zz			Like "z.", but leave the cursor in the same column.
 			Careful: If caps-lock is on, this command becomes
-			"ZZ": write buffer and exit!  {not in Vi}
+			"ZZ": write buffer and exit!
 
 							*z-*
 z-			Redraw, line [count] at bottom of window (default
 			cursor line).  Put cursor at first non-blank in the
 			line.
 
 							*zb*
 zb			Like "z-", but leave the cursor in the same column.
-			{not in Vi}
 
 ==============================================================================
 4. Scrolling horizontally				*scroll-horizontal*
 
 For the following four commands the cursor follows the screen.  If the
@@ -156,43 +152,39 @@ to the closest character that is on the screen.  The value of 'sidescroll' is
 not used.
 
 z<Right>    or						*zl* *z<Right>*
 zl			Move the view on the text [count] characters to the
 			right, thus scroll the text [count] characters to the
-			left.  This only works when 'wrap' is off.  {not in
-			Vi}
+			left.  This only works when 'wrap' is off.
 
 z<Left>      or						*zh* *z<Left>*
 zh			Move the view on the text [count] characters to the
 			left, thus scroll the text [count] characters to the
-			right.  This only works when 'wrap' is off.  {not in
-			Vi}
+			right.  This only works when 'wrap' is off.
 
 							*zL*
 zL			Move the view on the text half a screenwidth to the
 			right, thus scroll the text half a screenwidth to the
-			left.  This only works when 'wrap' is off.  {not in
-			Vi}
+			left.  This only works when 'wrap' is off.
 
 							*zH*
 zH			Move the view on the text half a screenwidth to the
 			left, thus scroll the text half a screenwidth to the
-			right.  This only works when 'wrap' is off.  {not in
-			Vi}
+			right.  This only works when 'wrap' is off.
 
 For the following two commands the cursor is not moved in the text, only the
 text scrolls on the screen.
 
 							*zs*
 zs			Scroll the text horizontally to position the cursor
 			at the start (left side) of the screen.  This only
-			works when 'wrap' is off.  {not in Vi}
+			works when 'wrap' is off.
 
 							*ze*
 ze			Scroll the text horizontally to position the cursor
 			at the end (right side) of the screen.  This only
-			works when 'wrap' is off.  {not in Vi}
+			works when 'wrap' is off.
 
 ==============================================================================
 5. Scrolling synchronously				*scroll-binding*
 
 Occasionally, it is desirable to bind two or more windows together such that
diff --git a/runtime/doc/sign.txt b/runtime/doc/sign.txt
index 4886f7407..4f59c8f85 100644
--- a/runtime/doc/sign.txt
+++ b/runtime/doc/sign.txt

 
 
 		  VIM REFERENCE MANUAL    by Gordon Prieur
 					  and Bram Moolenaar
 
@@ -8,11 +8,10 @@
 Sign Support Features				*sign-support*
 
 1. Introduction				|sign-intro|
 2. Commands				|sign-commands|
 
-{Vi does not have any of these features}
 {only available when compiled with the |+signs| feature}
 
 ==============================================================================
 1. Introduction					*sign-intro* *signs*
 
diff --git a/runtime/doc/spell.txt b/runtime/doc/spell.txt
index c7c83aa88..4a28cdc0c 100644
--- a/runtime/doc/spell.txt
+++ b/runtime/doc/spell.txt

 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
 
 
@@ -9,14 +9,11 @@ Spell checking						*spell*
 1. Quick start			|spell-quickstart|
 2. Remarks on spell checking	|spell-remarks|
 3. Generating a spell file	|spell-mkspell|
 4. Spell file format		|spell-file-format|
 
-{Vi does not have any of these commands}
-
-Spell checking is not available when the |+syntax| feature has been disabled
-at compile time.
+{not available when the |+syntax| feature has been disabled at compile time}
 
 Note: There also is a vimspell plugin.  If you have it you can do ":help
 vimspell" to find about it.  But you will probably want to get rid of the
 plugin and use the 'spell' option instead, it works better.
 
diff --git a/runtime/doc/starting.txt b/runtime/doc/starting.txt
index 595f595df..c76557913 100644
--- a/runtime/doc/starting.txt
+++ b/runtime/doc/starting.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -82,11 +82,10 @@ filename	One or more file names.  The first one will be the current
 							*-q* *-qf*
 -q [errorfile]	QuickFix mode.  The file with the name [errorfile] is read
 		and the first error is displayed.  See |quickfix|.
 		If [errorfile] is not given, the 'errorfile' option is used
 		for the file name.  See 'errorfile' for the default value.
-		{not in Vi}
 
 (nothing)	Without one of the four items above, Vim will start editing a
 		new buffer.  It's empty and doesn't have a file name.
 
 
@@ -127,21 +126,21 @@ argument.
 On VMS all option arguments are assumed to be lowercase, unless preceded with
 a slash.  Thus "-R" means recovery and "-/R" readonly.
 
 --help							*-h* *--help* *-?*
 -?
--h		Give usage (help) message and exit.  {not in Vi}
+-h		Give usage (help) message and exit.
 		See |info-message| about capturing the text.
 
 							*--version*
 --version	Print version information and exit.  Same output as for
-		|:version| command.  {not in Vi}
+		|:version| command.
 		See |info-message| about capturing the text.
 
 							*--noplugin*
 --noplugin	Skip loading plugins.  Resets the 'loadplugins' option.
-		{not in Vi}
+
 		Note that the |-u| argument may also disable loading plugins:
 			argument   load: vimrc files  plugins  defaults.vim ~
 			(nothing)	     yes	yes	  yes
 			-u NONE		     no		no	  no
 			-u DEFAULTS	     no		no	  yes
@@ -188,26 +187,26 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 			vim  -c "set ff=dos"  -c wq  mine.mak
 <
 		Note: You can use up to 10 "+" or "-c" arguments in a Vim
 		command.  They are executed in the order given.  A "-S"
 		argument counts as a "-c" argument as well.
-		{Vi only allows one command}
 
 --cmd {command}						*--cmd*
 		{command} will be executed before processing any vimrc file.
 		Otherwise it acts like -c {command}.  You can use up to 10 of
 		these commands, independently from "-c" commands.
-		{not in Vi}
 
 							*-S*
 -S {file}	The {file} will be sourced after the first file has been read.
 		This is an easy way to do the equivalent of: >
 			-c "source {file}"
 <		It can be mixed with "-c" arguments and repeated like "-c".
 		The limit of 10 "-c" arguments applies here as well.
 		{file} cannot start with a "-".
-		{not in Vi}
+
+		Do not use this for running a script to do some work and exit
+		Vim, you won't see error messages.  Use |-u| instead.
 
 -S		Works like "-S Session.vim".  Only when used as the last
 		argument or when another "-" option follows.
 
 							*-r*
@@ -215,12 +214,11 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		existing swap files is given.  With a file name, a swap file
 		is read to recover a crashed editing session.  See
 		|crash-recovery|.
 
 							*-L*
--L		Same as -r.  {only in some versions of Vi: "List recoverable
-		edit sessions"}
+-L		Same as -r.
 
 							*-R*
 -R		Readonly mode.  The 'readonly' option will be set for all the
 		files being edited.  You can still edit the buffer, but will
 		be prevented from accidentally overwriting a file.  If you
@@ -236,19 +234,17 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 
 							*-m*
 -m		Modifications not allowed to be written.  The 'write' option
 		will be reset, so that writing files is disabled.  However,
 		the 'write' option can be set to enable writing again.
-		{not in Vi}
 
 							*-M*
 -M		Modifications not allowed.  The 'modifiable' option will be
 		reset, so that changes are not allowed.  The 'write' option
 		will be reset, so that writing files is disabled.  However,
 		the 'modifiable' and 'write' options can be set to enable
 		changes and writing.
-		{not in Vi}
 
 					*-Z* *restricted-mode* *E145* *E981*
 -Z		Restricted mode.  All commands that make use of an external
 		shell are disabled.  This includes suspending with CTRL-Z,
 		":sh", filtering, the system() function, backtick expansion
@@ -258,15 +254,13 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		Interfaces, such as Python, Ruby and Lua, are also disabled,
 		since they could be used to execute shell commands.  Perl uses
 		the Safe module.
 		Note that the user may still find a loophole to execute a
 		shell command, it has only been made difficult.
-		{not in Vi}
 
 							*-g*
 -g		Start Vim in GUI mode.  See |gui|. For the opposite see |-v|.
-		{not in Vi}
 
 							*-v*
 -v		Start Ex in Vi mode.  Only makes a difference when the
 		executable is called "ex" or "gvim".  For gvim the GUI is not
 		started if possible.
@@ -276,11 +270,10 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		executable is not called "ex".
 
 							*-E*
 -E		Start Vim in improved Ex mode |gQ|.  Only makes a difference
 		when the executable is not called "exim".
-		{not in Vi}
 
 							*-s-ex*
 -s		Silent or batch mode.  Only when Vim was started as "ex" or
 		when preceded with the "-e" argument.  Otherwise see |-s|,
 		which does take an argument while this use of "-s" doesn't.
@@ -300,42 +293,45 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		something.
 		Initializations are skipped (except the ones given with the
 		"-u" argument).
 		Example: >
 			vim -e -s  < thefilter  thefile
+<		For the opposite, to see errors from the script, execute the
+		file with the |-u| flag: >
+			vim -u thefilter thefile
 <
 							*-b*
 -b		Binary mode.  File I/O will only recognize <NL> to separate
 		lines.  The 'expandtab' option will be reset.  The 'textwidth'
 		option is set to 0.  'modeline' is reset.  The 'binary' option
 		is set.  This is done after reading the vimrc/exrc files but
 		before reading any file in the arglist.  See also
-		|edit-binary|.  {not in Vi}
+		|edit-binary|.
 
 							*-l*
 -l		Lisp mode.  Sets the 'lisp' and 'showmatch' options on.
 
 							*-A*
 -A		Arabic mode.  Sets the 'arabic' option on.  (Only when
 		compiled with the |+arabic| features (which include
 		|+rightleft|), otherwise Vim gives an error message
-		and exits.)  {not in Vi}
+		and exits.)
 
 							*-F*
 -F		This was used for Farsi mode, which has been removed.
 		See |farsi.txt|.
 
 							*-H*
 -H		Hebrew mode.  Sets the 'hkmap' and 'rightleft' options on.
 		(Only when compiled with the |+rightleft| feature, otherwise
-		Vim gives an error message and exits.)  {not in Vi}
+		Vim gives an error message and exits.)
 
 							*-V* *verbose*
 -V[N]		Verbose.  Sets the 'verbose' option to [N] (default: 10).
 		Messages will be given for each file that is ":source"d and
 		for reading or writing a viminfo file.  Can be used to find
-		out what is happening upon startup and exit.  {not in Vi}
+		out what is happening upon startup and exit.
 		Example: >
 			vim -V8 foobar
 
 -V[N]{filename}
 		Like -V and set 'verbosefile' to {filename}.  The result is
@@ -346,11 +342,10 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 <
 							*-D*
 -D		Debugging.  Go to debugging mode when executing the first
 		command from a script. |debug-mode|
 		{not available when compiled without the |+eval| feature}
-		{not in Vi}
 
 							*-C*
 -C		Compatible mode.  Sets the 'compatible' option.  You can use
 		this to get 'compatible', even though a .vimrc file exists.
 		Keep in mind that the command ":set nocompatible" in some
@@ -358,25 +353,24 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		with 'nocompatible' anyway.  To find out, use: >
 			:verbose set compatible?
 <		Several plugins won't work with 'compatible' set.  You may
 		want to set it after startup this way: >
 			vim "+set cp" filename
-<		Also see |compatible-default|.  {not in Vi}
+<		Also see |compatible-default|.
 
 							*-N*
 -N		Not compatible mode.  Resets the 'compatible' option.  You can
 		use this to get 'nocompatible', when there is no .vimrc file
 		or when using "-u NONE".
-		Also see |compatible-default|.  {not in Vi}
+		Also see |compatible-default|.
 
 							*-y* *easy*
 -y		Easy mode.  Implied for |evim| and |eview|.  Starts with
 		'insertmode' set and behaves like a click-and-type editor.
 		This sources the script $VIMRUNTIME/evim.vim.  Mappings are
 		set up to work like most click-and-type editors, see
 		|evim-keys|.  The GUI is started when available.
-		{not in Vi}
 
 							*-n*
 -n		No swap file will be used.  Recovery after a crash will be
 		impossible.  Handy if you want to view or edit a file on a
 		very slow medium (e.g., a floppy).
@@ -392,65 +386,60 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		When you want to reduce accesses to the disk (e.g., for a
 		laptop), don't use "-n", but set 'updatetime' and
 		'updatecount' to very big numbers, and type ":preserve" when
 		you want to save your work.  This way you keep the possibility
 		for crash recovery.
-		{not in Vi}
 
 							*-o*
 -o[N]		Open N windows, split horizontally.  If [N] is not given,
 		one window is opened for every file given as argument.  If
 		there is not enough room, only the first few files get a
 		window.  If there are more windows than arguments, the last
 		few windows will be editing an empty file.
-		{not in Vi}
 
 							*-O*
 -O[N]		Open N windows, split vertically.  Otherwise it's like -o.
 		If both the -o and the -O option are given, the last one on
 		the command line determines how the windows will be split.
-		{not in Vi}
 
 							*-p*
 -p[N]		Open N tab pages.  If [N] is not given, one tab page is opened
 		for every file given as argument.  The maximum is set with
 		'tabpagemax' pages (default 10).  If there are more tab pages
 		than arguments, the last few tab pages will be editing an
 		empty file.  Also see |tabpage|.
-		{not in Vi}
 
 							*-T*
 -T {terminal}	Set the terminal type to "terminal".  This influences the
 		codes that Vim will send to your terminal.  This is normally
 		not needed, because Vim will be able to find out what type
-		of terminal you are using.  (See |terminal-info|.)  {not in Vi}
+		of terminal you are using.  (See |terminal-info|.)
 
 							*--not-a-term*
 --not-a-term	Tells Vim that the user knows that the input and/or output is
 		not connected to a terminal.  This will avoid the warning and
 		the two second delay that would happen.
 		Also avoids the "Reading from stdin..." message.
-		{not in Vi}
+		Also avoids the "N files to edit" message.
 
 							*--ttyfail*
 --ttyfail	When the stdin or stdout is not a terminal (tty) then exit
 		right away.
 
 							*-d*
 -d		Start in diff mode, like |vimdiff|.
-		{not in Vi} {not available when compiled without the |+diff|
-		feature}
+		{not available when compiled without the |+diff| feature}
 
 -d {device}	Only on the Amiga and when not compiled with the |+diff|
 		feature.  Works like "-dev".
 							*-dev*
 -dev {device}	Only on the Amiga: The {device} is opened to be used for
 		editing.
 		Normally you would use this to set the window position and
 		size: "-d con:x/y/width/height", e.g.,
 		"-d con:30/10/600/150".  But you can also use it to start
-		editing on another device, e.g., AUX:.  {not in Vi}
+		editing on another device, e.g., AUX:.
 							*-f*
 -f		GUI: Do not disconnect from the program that started Vim.
 		'f' stands for "foreground".  If omitted, the GUI forks a new
 		process and exits the current one.  "-f" should be used when
 		gvim is started by a program that will wait for the edit
@@ -465,11 +454,10 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		readnews).  See |amiga-window|.
 
 		MS-Windows: This option is not supported.  However, when
 		running Vim with an installed vim.bat or gvim.bat file it
 		works.
-		{not in Vi}
 
 
 							*--nofork*
 --nofork	GUI: Do not fork.  Same as |-f|.
 							*-u* *E282*
@@ -497,26 +485,23 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 
 		Using the "-u" argument with another argument than DEFAULTS
 		has the side effect that the 'compatible' option will be on by
 		default.  This can have unexpected effects.  See
 		|'compatible'|.
-		{not in Vi}
 
 							*-U* *E230*
 -U {gvimrc}	The file {gvimrc} is read for initializations when the GUI
 		starts.  Other GUI initializations are skipped.  When {gvimrc}
 		is equal to "NONE", no file is read for GUI initializations at
 		all.  |gui-init|
 		Exception: Reading the system-wide menu file is always done.
-		{not in Vi}
 
 							*-i*
 -i {viminfo}	The file "viminfo" is used instead of the default viminfo
 		file.  If the name "NONE" is used (all uppercase), no viminfo
 		file is read or written, even if 'viminfo' is set or when
 		":rv" or ":wv" are used.  See also |viminfo-file|.
-		{not in Vi}
 
 							*--clean*
 --clean		Similar to "-u DEFAULTS -U NONE -i NONE":
 		- initializations from files and environment variables is
 		  skipped
@@ -549,20 +534,18 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		been built in, the -X option also disables that connection as
 		it, too, may have undesirable delays.
 		When the connection is desired later anyway (e.g., for
 		client-server messages), call the |serverlist()| function.
 		This does not enable the XSMP handler though.
-		{not in Vi}
 
 							*-s*
 -s {scriptin}	The script file "scriptin" is read.  The characters in the
 		file are interpreted as if you had typed them.  The same can
 		be done with the command ":source! {scriptin}".  If the end
 		of the file is reached before the editor exits, further
 		characters are read from the keyboard.  Only works when not
 		started in Ex mode, see |-s-ex|.  See also |complex-repeat|.
-		{not in Vi}
 
 							*-w_nr*
 -w {number}
 -w{number}	Set the 'window' option to {number}.
 
@@ -571,74 +554,70 @@ a slash.  Thus "-R" means recovery and "-/R" readonly.
 		"scriptout", until you exit Vim.  This is useful if you want
 		to create a script file to be used with "vim -s" or
 		":source!".  When the "scriptout" file already exists, new
 		characters are appended.  See also |complex-repeat|.
 		{scriptout} cannot start with a digit.
-		{not in Vi}
 
 							*-W*
 -W {scriptout}	Like -w, but do not append, overwrite an existing file.
-		{not in Vi}
 
 --remote [+{cmd}] {file} ...
 		Open the {file} in another Vim that functions as a server.
 		Any non-file arguments must come before this.
-		See |--remote|. {not in Vi}
+		See |--remote|.
 
 --remote-silent [+{cmd}] {file} ...
 		Like --remote, but don't complain if there is no server.
-		See |--remote-silent|. {not in Vi}
+		See |--remote-silent|.
 
 --remote-wait [+{cmd}] {file} ...
 		Like --remote, but wait for the server to finish editing the
 		file(s).
-		See |--remote-wait|. {not in Vi}
+		See |--remote-wait|.
 
 --remote-wait-silent [+{cmd}] {file} ...
 		Like --remote-wait, but don't complain if there is no server.
-		See |--remote-wait-silent|. {not in Vi}
+		See |--remote-wait-silent|.
 
 --servername {name}
 		Specify the name of the Vim server to send to or to become.
-		See |--servername|. {not in Vi}
+		See |--servername|.
 
 --remote-send {keys}
 		Send {keys} to a Vim server and exit.
-		See |--remote-send|. {not in Vi}
+		See |--remote-send|.
 
 --remote-expr {expr}
 		Evaluate {expr} in another Vim that functions as a server.
 		The result is printed on stdout.
-		See |--remote-expr|. {not in Vi}
+		See |--remote-expr|.
 
 --serverlist	Output a list of Vim server names and exit.  See
-		|--serverlist|. {not in Vi}
+		|--serverlist|.
 
 --socketid {id}						*--socketid*
 		GTK+ GUI Vim only.  Make gvim try to use GtkPlug mechanism, so
 		that it runs inside another window.  See |gui-gtk-socketid|
-		for details. {not in Vi}
+		for details.
 
 --windowid {id}						*--windowid*
 		Win32 GUI Vim only.  Make gvim try to use the window {id} as a
 		parent, so that it runs inside that window.  See
-		|gui-w32-windowid| for details. {not in Vi}
+		|gui-w32-windowid| for details.
 
 --echo-wid						*--echo-wid*
 		GTK+ GUI Vim only.  Make gvim echo the Window ID on stdout,
 		which can be used to run gvim in a kpart widget.  The format
 		of the output is: >
 			WID: 12345\n
-<		{not in Vi}
 
 --role {role}						*--role*
 		GTK+ 2 GUI only.  Set the role of the main window to {role}.
 		The window role can be used by a window manager to uniquely
 		identify a window, in order to restore window placement and
 		such.  The --role argument is passed automatically when
 		restoring the session on login.  See |gui-gnome-session|
-		{not in Vi}
 
 -P {parent-title}				*-P* *MDI* *E671* *E672*
 		Win32 only: Specify the title of the parent application.  When
 		possible, Vim will run in an MDI window inside the
 		application.
@@ -1265,20 +1244,20 @@ You can use these files as they are, or copy/paste lines to include in another
 vimrc file.
 
 							*:mk* *:mkexrc*
 :mk[exrc] [file]	Write current key mappings and changed options to
 			[file] (default ".exrc" in the current directory),
-			unless it already exists.  {not in Vi}
+			unless it already exists.
 
 :mk[exrc]! [file]	Always write current key mappings and changed
 			options to [file] (default ".exrc" in the current
-			directory).  {not in Vi}
+			directory).
 
 							*:mkv* *:mkvimrc*
 :mkv[imrc][!] [file]	Like ":mkexrc", but the default is ".vimrc" in the
 			current directory.  The ":version" command is also
-			written to the file.  {not in Vi}
+			written to the file.
 
 These commands will write ":map" and ":set" commands to a file, in such a way
 that when these commands are executed, the current key mappings and options
 will be set to the same values.  The options 'columns', 'endofline',
 'fileformat', 'key', 'lines', 'modified', 'scroll', 'term', 'textmode',
@@ -1340,12 +1319,11 @@ remember information for all Views and Sessions together |viminfo-file|.
 
 You can quickly start editing with a previously saved View or Session with the
 |-S| argument: >
 	vim -S Session.vim
 <
-All this is {not in Vi} and {not available when compiled without the
-|+mksession| feature}.
+All this is {not available when compiled without the |+mksession| feature}.
 
 							*:mks* *:mksession*
 :mks[ession][!] [file]	Write a Vim script that restores the current editing
 			session.
 			When [!] is included an existing file is overwritten.
@@ -1656,11 +1634,11 @@ most of the information will be restored).
 
 						   *:rv* *:rviminfo* *E195*
 :rv[iminfo][!] [file]	Read from viminfo file [file] (default: see above).
 			If [!] is given, then any information that is
 			already set (registers, marks, |v:oldfiles|, etc.)
-			will be overwritten   {not in Vi}
+			will be overwritten
 
 			*:wv* *:wviminfo* *E137* *E138* *E574* *E886* *E929*
 :wv[iminfo][!] [file]	Write to viminfo file [file] (default: see above).
 			The information in the file is first read in to make
 			a merge between old and new info.  When [!] is used,
@@ -1669,22 +1647,20 @@ most of the information will be restored).
 			for up to 100 files will be written.
 			When you get error "E929: Too many viminfo temp files"
 			check that no old temp files were left behind (e.g.
 			~/.viminf*) and that you can write in the directory of
 			the .viminfo file.
-			{not in Vi}
 
 						*:ol* *:oldfiles*
 :ol[dfiles]		List the files that have marks stored in the viminfo
 			file.  This list is read on startup and only changes
 			afterwards with `:rviminfo!`.  Also see |v:oldfiles|.
 			The number can be used with |c_#<|.
 			The output can be filtered with |:filter|, e.g.: >
 				filter /\.vim/ oldfiles
 <			The filtering happens on the file name.
-			{not in Vi, only when compiled with the |+eval|
-			feature}
+			{only when compiled with the |+eval| feature}
 
 :bro[wse] ol[dfiles][!]
 			List file names as with |:oldfiles|, and then prompt
 			for a number.  When the number is valid that file from
 			the list is edited.
diff --git a/runtime/doc/tabpage.txt b/runtime/doc/tabpage.txt
index 57224f62d..1a2b8de9f 100644
--- a/runtime/doc/tabpage.txt
+++ b/runtime/doc/tabpage.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -14,11 +14,10 @@ when used in combination with more than one tab page.
 2. Commands			|tab-page-commands|
 3. Other items			|tab-page-other|
 4. Setting 'tabline'		|setting-tabline|
 5. Setting 'guitablabel'	|setting-guitablabel|
 
-{Vi does not have any of these commands}
 {not able to use multiple tab pages when the |+windows| feature was disabled
 at compile time}
 
 ==============================================================================
 1. Introduction						*tab-page-intro*
@@ -287,11 +286,10 @@ LOOPING OVER TAB PAGES:
 		will not be visited.
 		The last tab page (or where an error occurred) becomes the
 		current tab page.
 		{cmd} can contain '|' to concatenate several commands.
 		{cmd} must not open or close tab pages or reorder them.
-		{not in Vi}
 		Also see |:windo|, |:argdo|, |:bufdo|, |:cdo|, |:ldo|, |:cfdo|
 		and |:lfdo|
 
 ==============================================================================
 3. Other items						*tab-page-other*
diff --git a/runtime/doc/tagsrch.txt b/runtime/doc/tagsrch.txt
index bc384521d..2f493e2d8 100644
--- a/runtime/doc/tagsrch.txt
+++ b/runtime/doc/tagsrch.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -58,11 +58,11 @@ CTRL-]			Jump to the definition of the keyword under the
 			jumping to other matching tags.
 			{Vi: identifier after the cursor}
 
 							*v_CTRL-]*
 {Visual}CTRL-]		Same as ":tag {name}", where {name} is the text that
-			is highlighted.  {not in Vi}
+			is highlighted.
 
 							*telnet-CTRL-]*
 CTRL-] is the default telnet escape key.  When you type CTRL-] to jump to a
 tag, you will get the telnet prompt instead.  Most versions of telnet allow
 changing or disabling the default escape key.  See the telnet man page.  You
@@ -110,22 +110,22 @@ On the tag stack is remembered which tags you jumped to, and from where.
 Tags are only pushed onto the stack when the 'tagstack' option is set.
 
 g<RightMouse>						*g<RightMouse>*
 <C-RightMouse>					*<C-RightMouse>* *CTRL-T*
 CTRL-T			Jump to [count] older entry in the tag stack
-			(default 1).  {not in Vi}
+			(default 1).
 
 						*:po* *:pop* *E555* *E556*
 :[count]po[p][!]	Jump to [count] older entry in tag stack (default 1).
-			See |tag-!| for [!].  {not in Vi}
+			See |tag-!| for [!].
 
 :[count]ta[g][!]	Jump to [count] newer entry in tag stack (default 1).
-			See |tag-!| for [!].  {not in Vi}
+			See |tag-!| for [!].
 
 							*:tags*
 :tags			Show the contents of the tag stack.  The active
-			entry is marked with a '>'.  {not in Vi}
+			entry is marked with a '>'.
 
 The output of ":tags" looks like this:
 
    # TO tag      FROM line  in file/text
    1  1 main		 1  harddisk2:text/vim/test
@@ -202,11 +202,11 @@ the same entry.
 			See |tag-!| for [!].
 			With a '>' in the first column is indicated which is
 			the current position in the list (if there is one).
 			[name] can be a regexp pattern, see |tag-regexp|.
 			See |tag-priority| for the priorities used in the
-			listing.  {not in Vi}
+			listing.
 			Example output:
 
 >
 	 nr pri kind tag		file
 	  1 F	f    mch_delay		os_amiga.c
@@ -229,58 +229,54 @@ the same entry.
 			If you already see the tag you want to use, you can
 			type 'q' and enter the number.
 
 							*:sts* *:stselect*
 :sts[elect][!] [name]	Does ":tselect[!] [name]" and splits the window for
-			the selected tag.  {not in Vi}
+			the selected tag.
 
 							*g]*
 g]			Like CTRL-], but use ":tselect" instead of ":tag".
-			{not in Vi}
 
 							*v_g]*
 {Visual}g]		Same as "g]", but use the highlighted text as the
-			identifier.  {not in Vi}
+			identifier.
 
 							*:tj* *:tjump*
 :tj[ump][!] [name]	Like ":tselect", but jump to the tag directly when
-			there is only one match.  {not in Vi}
+			there is only one match.
 
 							*:stj* *:stjump*
 :stj[ump][!] [name]	Does ":tjump[!] [name]" and splits the window for the
-			selected tag.  {not in Vi}
+			selected tag.
 
 							*g_CTRL-]*
 g CTRL-]		Like CTRL-], but use ":tjump" instead of ":tag".
-			{not in Vi}
 
 							*v_g_CTRL-]*
 {Visual}g CTRL-]	Same as "g CTRL-]", but use the highlighted text as
-			the identifier.  {not in Vi}
+			the identifier.
 
 							*:tn* *:tnext*
 :[count]tn[ext][!]	Jump to [count] next matching tag (default 1).  See
-			|tag-!| for [!].  {not in Vi}
+			|tag-!| for [!].
 
 							*:tp* *:tprevious*
 :[count]tp[revious][!]	Jump to [count] previous matching tag (default 1).
-			See |tag-!| for [!].  {not in Vi}
+			See |tag-!| for [!].
 
 							*:tN* *:tNext*
-:[count]tN[ext][!]	Same as ":tprevious".  {not in Vi}
+:[count]tN[ext][!]	Same as ":tprevious".
 
 							*:tr* *:trewind*
 :[count]tr[ewind][!]	Jump to first matching tag.  If [count] is given, jump
-			to [count]th matching tag.  See |tag-!| for [!].  {not
-			in Vi}
+			to [count]th matching tag.  See |tag-!| for [!].
 
 							*:tf* *:tfirst*
-:[count]tf[irst][!]	Same as ":trewind".  {not in Vi}
+:[count]tf[irst][!]	Same as ":trewind".
 
 							*:tl* *:tlast*
-:tl[ast][!]		Jump to last matching tag.  See |tag-!| for [!].  {not
-			in Vi}
+:tl[ast][!]		Jump to last matching tag.  See |tag-!| for [!].
 
 							*:lt* *:ltag*
 :lt[ag][!] [name]	Jump to tag [name] and add the matching tags to a new
 			location list for the current window.  [name] can be
 			a regexp pattern, see |tag-regexp|.  When [name] is
@@ -288,11 +284,10 @@ g CTRL-]		Like CTRL-], but use ":tjump" instead of ":tag".
 			used.  The search pattern to locate the tag line is
 			prefixed with "\V" to escape all the special
 			characters (very nomagic). The location list showing
 			the matching tags is independent of the tag stack.
 			See |tag-!| for [!].
-			{not in Vi}
 
 When there is no other message, Vim shows which matching tag has been jumped
 to, and the number of matching tags: >
 	tag 1 of 3 or more
 The " or more" is used to indicate that Vim didn't try all the tags files yet.
@@ -315,38 +310,32 @@ the same as above, with a "p" prepended.
 {not available when compiled without the |+quickfix| feature}
 
 							*:pts* *:ptselect*
 :pts[elect][!] [name]	Does ":tselect[!] [name]" and shows the new tag in a
 			"Preview" window.  See |:ptag| for more info.
-			{not in Vi}
 
 							*:ptj* *:ptjump*
 :ptj[ump][!] [name]	Does ":tjump[!] [name]" and shows the new tag in a
 			"Preview" window.  See |:ptag| for more info.
-			{not in Vi}
 
 							*:ptn* *:ptnext*
 :[count]ptn[ext][!]	":tnext" in the preview window.  See |:ptag|.
-			{not in Vi}
 
 							*:ptp* *:ptprevious*
 :[count]ptp[revious][!]	":tprevious" in the preview window.  See |:ptag|.
-			{not in Vi}
 
 							*:ptN* *:ptNext*
-:[count]ptN[ext][!]	Same as ":ptprevious".  {not in Vi}
+:[count]ptN[ext][!]	Same as ":ptprevious".
 
 							*:ptr* *:ptrewind*
 :[count]ptr[ewind][!]	":trewind" in the preview window.  See |:ptag|.
-			{not in Vi}
 
 							*:ptf* *:ptfirst*
-:[count]ptf[irst][!]	Same as ":ptrewind".  {not in Vi}
+:[count]ptf[irst][!]	Same as ":ptrewind".
 
 							*:ptl* *:ptlast*
 :ptl[ast][!]		":tlast" in the preview window.  See |:ptag|.
-			{not in Vi}
 
 ==============================================================================
 4. Tags details						*tag-details*
 
 							*static-tag*
@@ -628,25 +617,22 @@ the search text.  This is for backwards compatibility with Vi.
 							*E434* *E435*
 If the command is a normal search command (it starts and ends with "/" or
 "?"), some special handling is done:
 - Searching starts on line 1 of the file.
   The direction of the search is forward for "/", backward for "?".
-  Note that 'wrapscan' does not matter, the whole file is always searched.  (Vi
-  does use 'wrapscan', which caused tags sometimes not be found.)  {Vi starts
-  searching in line 2 of another file.  It does not find a tag in line 1 of
-  another file when 'wrapscan' is not set}
+  Note that 'wrapscan' does not matter, the whole file is always searched.
 - If the search fails, another try is done ignoring case.  If that fails too,
   a search is done for:
 	"^tagname[ \t]*("
   (the tag with '^' prepended and "[ \t]*(" appended).  When using function
   names, this will find the function name when it is in column 0.  This will
   help when the arguments to the function have changed since the tags file was
   made.  If this search also fails another search is done with:
 	"^[#a-zA-Z_].*\<tagname[ \t]*("
   This means: A line starting with '#' or an identifier and containing the tag
   followed by white space and a '('.  This will find macro names and function
-  names with a type prepended.  {the extra searches are not in Vi}
+  names with a type prepended.
 
 
 							*tag-old-static*
 Until March 2019 (patch 8.1.1092) an outdated format was supported:
     {tagfile}:{tagname} {TAB} {tagfile} {TAB} {tagaddress}
@@ -718,139 +704,134 @@ mapping to do that for you.  Here is an example: >
 [i			Display the first line that contains the keyword
 			under the cursor.  The search starts at the beginning
 			of the file.  Lines that look like a comment are
 			ignored (see 'comments' option).  If a count is given,
 			the count'th matching line is displayed, and comment
-			lines are not ignored.  {not in Vi}
+			lines are not ignored.
 
 							*]i*
 ]i			like "[i", but start at the current cursor position.
-			{not in Vi}
 
 							*:is* *:isearch*
 :[range]is[earch][!] [count] [/]pattern[/]
 			Like "[i"  and "]i", but search in [range] lines
 			(default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 
 							*[I*
 [I			Display all lines that contain the keyword under the
 			cursor.  Filenames and line numbers are displayed
 			for the found lines.  The search starts at the
-			beginning of the file.  {not in Vi}
+			beginning of the file.
 
 							*]I*
 ]I			like "[I", but start at the current cursor position.
-			{not in Vi}
 
 							*:il* *:ilist*
 :[range]il[ist][!] [/]pattern[/]
 			Like "[I" and "]I", but search in [range] lines
 			(default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 
 							*[_CTRL-I*
 [ CTRL-I		Jump to the first line that contains the keyword
 			under the cursor.  The search starts at the beginning
 			of the file.  Lines that look like a comment are
 			ignored (see 'comments' option).  If a count is given,
 			the count'th matching line is jumped to, and comment
-			lines are not ignored.  {not in Vi}
+			lines are not ignored.
 
 							*]_CTRL-I*
 ] CTRL-I		like "[ CTRL-I", but start at the current cursor
-			position.  {not in Vi}
+			position.
 
 							*:ij* *:ijump*
 :[range]ij[ump][!] [count] [/]pattern[/]
 			Like "[ CTRL-I"  and "] CTRL-I", but search in
 			[range] lines (default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 
 CTRL-W CTRL-I					*CTRL-W_CTRL-I* *CTRL-W_i*
 CTRL-W i		Open a new window, with the cursor on the first line
 			that contains the keyword under the cursor.  The
 			search starts at the beginning of the file.  Lines
 			that look like a comment line are ignored (see
 			'comments' option).  If a count is given, the count'th
 			matching line is jumped to, and comment lines are not
-			ignored.  {not in Vi}
+			ignored.
 
 							*:isp* *:isplit*
 :[range]isp[lit][!] [count] [/]pattern[/]
 			Like "CTRL-W i"  and "CTRL-W i", but search in
 			[range] lines (default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 
 							*[d*
 [d			Display the first macro definition that contains the
 			macro under the cursor.  The search starts from the
 			beginning of the file.  If a count is given, the
-			count'th matching line is displayed.  {not in Vi}
+			count'th matching line is displayed.
 
 							*]d*
 ]d			like "[d", but start at the current cursor position.
-			{not in Vi}
 
 							*:ds* *:dsearch*
 :[range]ds[earch][!] [count] [/]string[/]
 			Like "[d"  and "]d", but search in [range] lines
 			(default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 
 							*[D*
 [D			Display all macro definitions that contain the macro
 			under the cursor.  Filenames and line numbers are
 			displayed for the found lines.  The search starts
-			from the beginning of the file.  {not in Vi}
+			from the beginning of the file.
 
 							*]D*
 ]D			like "[D", but start at the current cursor position.
-			{not in Vi}
 
 							*:dli* *:dlist*
 :[range]dli[st][!] [/]string[/]
 			Like `[D`  and `]D`, but search in [range] lines
 			(default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 			Note that `:dl` works like `:delete` with the "l"
 			flag, not `:dlist`.
 
 							*[_CTRL-D*
 [ CTRL-D		Jump to the first macro definition that contains the
 			keyword under the cursor.  The search starts from
 			the beginning of the file.  If a count is given, the
-			count'th matching line is jumped to.  {not in Vi}
+			count'th matching line is jumped to.
 
 							*]_CTRL-D*
 ] CTRL-D		like "[ CTRL-D", but start at the current cursor
-			position.  {not in Vi}
+			position.
 
 							*:dj* *:djump*
 :[range]dj[ump][!] [count] [/]string[/]
 			Like "[ CTRL-D"  and "] CTRL-D", but search  in
 			[range] lines (default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 
 CTRL-W CTRL-D					*CTRL-W_CTRL-D* *CTRL-W_d*
 CTRL-W d		Open a new window, with the cursor on the first
 			macro definition line that contains the keyword
 			under the cursor.  The search starts from the
 			beginning of the file.  If a count is given, the
-			count'th matching line is jumped to.  {not in Vi}
+			count'th matching line is jumped to.
 
 							*:dsp* *:dsplit*
 :[range]dsp[lit][!] [count] [/]string[/]
 			Like "CTRL-W d", but search in [range] lines
 			(default: whole file).
-			See |:search-args| for [/] and [!].  {not in Vi}
+			See |:search-args| for [/] and [!].
 
 							*:che* *:checkpath*
 :che[ckpath]		List all the included files that could not be found.
-			{not in Vi}
 
-:che[ckpath]!		List all the included files.  {not in Vi}
+:che[ckpath]!		List all the included files.
 
 								*:search-args*
 Common arguments for the commands above:
 [!]	When included, find matches in lines that are recognized as comments.
 	When excluded, a match is ignored when the line is recognized as a
diff --git a/runtime/doc/terminal.txt b/runtime/doc/terminal.txt
index 006422dfb..d01959bac 100644
--- a/runtime/doc/terminal.txt
+++ b/runtime/doc/terminal.txt

 
 
 		  VIM REFERENCE MANUAL	  by Bram Moolenaar
 
 
@@ -40,11 +40,10 @@ If the result is "1" you have it.
       Other commands			|termdebug-commands|
       Prompt mode			|termdebug-prompt|
       Communication			|termdebug-communication|
       Customizing			|termdebug-customizing|
 
-{Vi does not have any of these commands}
 {only available when compiled with the |+terminal| feature}
 The terminal feature requires the |+job| and |+channel| features.
 
 ==============================================================================
 1. Basic use						*terminal-use*
diff --git a/runtime/doc/textprop.txt b/runtime/doc/textprop.txt
index 263c40eb1..b6831875d 100644
--- a/runtime/doc/textprop.txt
+++ b/runtime/doc/textprop.txt
@@ -18,11 +18,10 @@ What is not working yet:
 1. Introduction			|text-prop-intro|
 2. Functions			|text-prop-functions|
 3. When text changes		|text-prop-changes|
 
 
-{Vi does not have text properties}
 {not able to use text properties when the |+textprop| feature was
 disabled at compile time}
 
 ==============================================================================
 1. Introduction						*text-prop-intro*
diff --git a/runtime/doc/undo.txt b/runtime/doc/undo.txt
index b6c9809c2..316e32f13 100644
--- a/runtime/doc/undo.txt
+++ b/runtime/doc/undo.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -23,11 +23,11 @@ u			Undo [count] changes.  {Vi: only one level}
 
 							*:u* *:un* *:undo*
 :u[ndo]			Undo one change.  {Vi: only one level}
 								*E830*
 :u[ndo] {N}		Jump to after change number {N}.  See |undo-branches|
-			for the meaning of {N}.  {not in Vi}
+			for the meaning of {N}.
 
 							*CTRL-R*
 CTRL-R			Redo [count] changes which were undone.  {Vi: redraw
 			screen}
 
@@ -93,11 +93,10 @@ change but joins in with the previous change use this command:
 						*:undoj* *:undojoin* *E790*
 :undoj[oin]		Join further changes with the previous undo block.
 			Warning: Use with care, it may prevent the user from
 			properly undoing changes.  Don't use this after undo
 			or redo.
-			{not in Vi}
 
 This is most useful when you need to prompt the user halfway through a change.
 For example in a function that calls |getchar()|.  Do make sure that there was
 a related change before this that you must join with.
 
@@ -149,11 +148,11 @@ This is explained in the user manual: |usr_32.txt|.
 			be used with the |:later| and |:earlier| commands.
 			For more details use the |undotree()| function.
 
 							*g-*
 g-			Go to older text state.  With a count repeat that many
-			times.  {not in Vi}
+			times.
 							*:ea* *:earlier*
 :earlier {count}	Go to older text state {count} times.
 :earlier {N}s		Go to older text state about {N} seconds before.
 :earlier {N}m		Go to older text state about {N} minutes before.
 :earlier {N}h		Go to older text state about {N} hours before.
@@ -168,11 +167,11 @@ g-			Go to older text state.  With a count repeat that many
 			the file was not written, ":earlier 1f" will go to
 			before the first change.
 
 							*g+*
 g+			Go to newer text state.  With a count repeat that many
-			times.  {not in Vi}
+			times.
 							*:lat* *:later*
 :later {count}		Go to newer text state {count} times.
 :later {N}s		Go to newer text state about {N} seconds later.
 :later {N}m		Go to newer text state about {N} minutes later.
 :later {N}h		Go to newer text state about {N} hours later.
@@ -278,14 +277,12 @@ respectively:
 		written.
 		Implementation detail: Overwriting happens by first deleting
 		the existing file and then creating a new file with the same
 		name. So it is not possible to overwrite an existing undofile
 		in a write-protected directory.
-		{not in Vi}
 
 :rundo {file}	Read undo history from {file}.
-		{not in Vi}
 
 You can use these in autocommands to explicitly specify the name of the
 history file.  E.g.: >
 
 	au BufReadPost * call ReadUndo()
@@ -372,14 +369,14 @@ information you can use these commands: >
 	:exe "normal a \<BS>\<Esc>"
 	:let &undolevels = old_undolevels
 	:unlet old_undolevels
 
 Marks for the buffer ('a to 'z) are also saved and restored, together with the
-text.  {Vi does this a little bit different}
+text.
 
 When all changes have been undone, the buffer is not considered to be changed.
-It is then possible to exit Vim with ":q" instead of ":q!" {not in Vi}.  Note
+It is then possible to exit Vim with ":q" instead of ":q!".  Note
 that this is relative to the last write of the file.  Typing "u" after ":w"
 actually changes the buffer, compared to what was written, so the buffer is
 considered changed then.
 
 When manual |folding| is being used, the folds are not saved and restored.
diff --git a/runtime/doc/usr_21.txt b/runtime/doc/usr_21.txt
index 513dad06b..86aadc2ca 100644
--- a/runtime/doc/usr_21.txt
+++ b/runtime/doc/usr_21.txt

 
 		     VIM USER MANUAL - by Bram Moolenaar
 
 			   Go away and come back
 
@@ -261,19 +261,22 @@ session (actually, you can source any Vim script with -S, thus it might as
 well stand for "source").
 
 The windows that were open are restored, with the same position and size as
 before.  Mappings and option values are like before.
    What exactly is restored depends on the 'sessionoptions' option.  The
-default value is "blank,buffers,curdir,folds,help,options,winsize".
+default value is:
+"blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal".
 
 	blank		keep empty windows
 	buffers		all buffers, not only the ones in a window
 	curdir		the current directory
 	folds		folds, also manually created ones
 	help		the help window
 	options		all options and mappings
+	tabpages	all tab pages
 	winsize		window sizes
+	terminal	include terminal windows
 
 Change this to your liking.  To also restore the size of the Vim window, for
 example, use: >
 
 	:set sessionoptions+=resize
diff --git a/runtime/doc/usr_22.txt b/runtime/doc/usr_22.txt
index e50237a9a..b3da19cc6 100644
--- a/runtime/doc/usr_22.txt
+++ b/runtime/doc/usr_22.txt

 
 		     VIM USER MANUAL - by Bram Moolenaar
 
 			   Finding the file to edit
 
diff --git a/runtime/doc/various.txt b/runtime/doc/various.txt
index 8b4f988ee..79889276a 100644
--- a/runtime/doc/various.txt
+++ b/runtime/doc/various.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -71,20 +71,17 @@ ga			Print the ascii value of the character under the
 			output the two characters that can be used to create
 			the character:
 			    <ö> 246, Hex 00f6, Oct 366, Digr o: ~
 			This shows you can type CTRL-K o : to insert ö.
 
-			{not in Vi}
-
 							*g8*
 g8			Print the hex values of the bytes used in the
 			character under the cursor, assuming it is in |UTF-8|
 			encoding.  This also shows composing characters.  The
 			value of 'maxcombine' doesn't matter.
 			Example of a character with two composing characters:
 				e0 b8 81 + e0 b8 b9 + e0 b9 89 ~
-			{not in Vi}
 
 							*8g8*
 8g8			Find an illegal UTF-8 byte sequence at or after the
 			cursor.  This works in two situations:
 			1. when 'encoding' is any 8-bit encoding
@@ -95,11 +92,10 @@ g8			Print the hex values of the bytes used in the
 			encoding because it contains illegal bytes.
 			Does not wrap around the end of the file.
 			Note that when the cursor is on an illegal byte or the
 			cursor is halfway a multi-byte character the command
 			won't move the cursor.
-			{not in Vi}
 
 						*:p* *:pr* *:print* *E749*
 :[range]p[rint] [flags]
 			Print [range] lines (default current line).
 			Note: If you are looking for a way to print your text
@@ -172,11 +168,10 @@ g8			Print the hex values of the bytes used in the
 			If the mark is "=", a line of dashes is printed
 			around the current line.
 
 :{range}z#[+-^.=]{count}				*:z#*
 			Like ":z", but number the lines.
-			{not in all versions of Vi, not with these arguments}
 
 							*:=*
 := [flags]		Print the last line number.
 			See |ex-flags| for [flags].
 
@@ -222,19 +217,17 @@ g8			Print the hex values of the bytes used in the
 			expression as argument.  This allows the use of
 			printable characters to represent special characters.
 
 			Example: >
 				:exe "normal \<c-w>\<c-w>"
-<			{not in Vi, of course}
 
 :{range}norm[al][!] {commands}				*:normal-range*
 			Execute Normal mode commands {commands} for each line
 			in the {range}.  Before executing the {commands}, the
 			cursor is positioned in the first column of the range,
 			for each line.  Otherwise it's the same as the
 			":normal" command without a range.
-			{not in Vi}
 
 							*:sh* *:shell* *E371*
 :sh[ell]		This command starts a shell.  When the shell exits
 			(after the "exit" command) you return to Vim.  The
 			name for the shell command comes from 'shell' option.
@@ -488,11 +481,11 @@ N  *+X11*		Unix only: can restore window title |X11|
 			be dynamically loaded.
 
 :ve[rsion] {nr}		Is now ignored.  This was previously used to check the
 			version number of a .vimrc file.  It was removed,
 			because you can now use the ":if" command for
-			version-dependent behavior.  {not in Vi}
+			version-dependent behavior.
 
 							*:redi* *:redir*
 :redi[r][!] > {file}	Redirect messages to file {file}.  The messages which
 			are the output of commands are written to that file,
 			until redirection ends.  The messages are also still
@@ -508,51 +501,48 @@ N  *+X11*		Unix only: can restore window title |X11|
 			To stop the messages and commands from being echoed to
 			the screen, put the commands in a function and call it
 			with ":silent call Function()".
 			An alternative is to use the 'verbosefile' option,
 			this can be used in combination with ":redir".
-			{not in Vi}
 
 :redi[r] >> {file}	Redirect messages to file {file}.  Append if {file}
-			already exists.  {not in Vi}
+			already exists.
 
 :redi[r] @{a-zA-Z}
 :redi[r] @{a-zA-Z}>	Redirect messages to register {a-z}.  Append to the
 			contents of the register if its name is given
 			uppercase {A-Z}.  The ">" after the register name is
-			optional. {not in Vi}
-:redi[r] @{a-z}>>	Append messages to register {a-z}. {not in Vi}
+			optional.
+:redi[r] @{a-z}>>	Append messages to register {a-z}.
 
 :redi[r] @*>		
 :redi[r] @+>		Redirect messages to the selection or clipboard. For
 			backward compatibility, the ">" after the register
 			name can be omitted. See |quotestar| and |quoteplus|.
-			{not in Vi}
 :redi[r] @*>>		
 :redi[r] @+>>		Append messages to the selection or clipboard.
-			{not in Vi}
 
 :redi[r] @">		Redirect messages to the unnamed register. For
 			backward compatibility, the ">" after the register
-			name can be omitted. {not in Vi}
-:redi[r] @">>		Append messages to the unnamed register. {not in Vi}
+			name can be omitted.
+:redi[r] @">>		Append messages to the unnamed register.
 
 :redi[r] => {var}	Redirect messages to a variable.  If the variable
 			doesn't exist, then it is created.  If the variable
 			exists, then it is initialized to an empty string.
 			The variable will remain empty until redirection ends.
 			Only string variables can be used.  After the
 			redirection starts, if the variable is removed or
 			locked or the variable type is changed, then further
-			command output messages will cause errors. {not in Vi}
+			command output messages will cause errors.
 			To get the output of one command the |execute()|
 			function can be used.
 
 :redi[r] =>> {var}	Append messages to an existing variable.  Only string
-			variables can be used. {not in Vi}
+			variables can be used.
 
-:redi[r] END		End redirecting messages.  {not in Vi}
+:redi[r] END		End redirecting messages.
 
 							*:filt* *:filter*
 :filt[er][!] {pat} {command}
 :filt[er][!] /{pat}/ {command}
 			Restrict the output of {command} to lines matching
@@ -690,16 +680,15 @@ K			Run a program to lookup the keyword under the
 			  in: >
 				!man 2 mkdir
 <			- When 'keywordprg' is equal to "man -s", a count
 			  before "K" is inserted after the "-s".  If there is
 			  no count, the "-s" is removed.
-			{not in Vi}
 
 							*v_K*
 {Visual}K		Like "K", but use the visually highlighted text for
 			the keyword.  Only works when the highlighted text is
-			not more than one line.  {not in Vi}
+			not more than one line.
 
 [N]gs							*gs* *:sl* *:sleep*
 :[N]sl[eep] [N]	[m]	Do nothing for [N] seconds.  When [m] is included,
 			sleep for [N] milliseconds.  The count for "gs" always
 			uses seconds.  The default is one second. >
@@ -708,11 +697,11 @@ K			Run a program to lookup the keyword under the
 			     :sleep 100m     "sleep for a hundred milliseconds
 			     10gs	     "sleep for ten seconds
 <			Can be interrupted with CTRL-C (CTRL-Break on MS-DOS).
 			"gs" stands for "goto sleep".
 			While sleeping the cursor is positioned in the text,
-			if at a visible position.  {not in Vi}
+			if at a visible position.
 			Also process the received netbeans messages. {only
 			available when compiled with the |+netbeans_intg|
 			feature}
 
 
diff --git a/runtime/doc/vi_diff.txt b/runtime/doc/vi_diff.txt
index b71fdbce4..a1f4ab4d5 100644
--- a/runtime/doc/vi_diff.txt
+++ b/runtime/doc/vi_diff.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
 Differences between Vim and Vi				*vi-differences*
 
-Throughout the help files differences between Vim and Vi/Ex are given in
-curly braces, like "{not in Vi}".  This file only lists what has not been
-mentioned in other files and gives an overview.
+This file lists the differences between Vim and Vi/Ex and gives an overview of
+what is in Vim that is not in Vi.
 
 Vim is mostly POSIX 1003.2-1 compliant.  The only command known to be missing
 is ":open".  There are probably a lot of small differences (either because Vim
 is missing something or because Posix is beside the mark).
 
@@ -178,10 +177,14 @@ Multiple windows and buffers.				|windows.txt|
 	for this facility.
 	Vim can also use multiple tab pages, each with one or more windows.  A
 	line with tab labels can be used to quickly switch between these pages.
 	|tab-page|
 
+Terminal window.					|:terminal|
+	Vim can create a window in which a terminal emulator runs.  This can
+	be used to execute an arbitrary command, a shell or a debugger.
+
 Syntax highlighting.					|:syntax|
 	Vim can highlight keywords, patterns and other things.  This is
 	defined by a number of |:syntax| commands, and can be made to
 	highlight most languages and file types.  A number of files are
 	included for highlighting the most common languages, like C, C++,
@@ -192,10 +195,15 @@ Syntax highlighting.					|:syntax|
 	The highlighted text can be exported as HTML. |convert-to-HTML|
 	Other items that can be highlighted are matches with the search string
 	|'hlsearch'|, matching parens |matchparen| and the cursor line and
 	column |'cursorline'| |'cursorcolumn'|.
 
+Text properties						|textprop.txt|
+	Vim supports highlighting text by a plugin.  Property types can be
+	specificed with |prop_type_add()| and properties can be placed with
+	|prop_add()|.
+
 Spell checking.						|spell|
 	When the 'spell' option is set Vim will highlight spelling mistakes.
 	About 50 languages are currently supported, selected with the
 	'spelllang' option.  In source code only comments and strings are
 	checked for spelling.
@@ -260,10 +268,12 @@ Visual mode.						|Visual-mode|
 		gq	format text to 'textwidth' columns
 		J	join lines
 		~	swap case
 		u	make lowercase
 		U	make uppercase
+	{Vi has no Visual mode, the name "visual" is used for Normal mode, to
+	distinguish it from Ex mode}
 
 Block operators.					|visual-block|
 	With Visual mode a rectangular block of text can be selected.  Start
 	Visual mode with CTRL-V.  The block can be deleted ("d"), yanked ("y")
 	or its case can be changed ("~", "u" and "U").  A deleted or yanked
@@ -520,10 +530,14 @@ brace skips braces inside quotes.
 With the CTRL-] command, the cursor may be in the middle of the identifier.
 
 The used tags are remembered.  Commands that can be used with the tag stack
 are CTRL-T, ":pop" and ":tag".  ":tags" lists the tag stack.
 
+Vi uses 'wrapscan' when searching for a tag.  When jumping to a tag Vi starts
+searching in line 2 of another file.  It does not find a tag in line 1 of
+another file when 'wrapscan' is not set.
+
 The 'tags' option can be set to a list of tag file names.  Thus multiple
 tag files can be used.  For file names that start with "./", the "./" is
 replaced with the path of the current file.  This makes it possible to use a
 tags file in the same directory as the file being edited.
 
@@ -793,27 +807,235 @@ The AUX: device of the Amiga is supported.
 Vim supports nearly all Vi commands and mostly in the same way.  That is when
 the 'compatible' option is set and 'cpoptions' contains all flags.  What the
 effect is of resetting 'compatible' and removing flags from 'cpoptions' can be
 found at the help for the specific command.
 
-Below is listed what features are present in Vi.  Anything else has been added
-by Vim.
+The help files used to mark features that are in Vim but not in Vi with {not
+in Vi}.  However, since these remarks cluttered the help files we now do it
+the other way around: Below is listed what Vi already supported.  Anything
+else has been added by Vim.
 
-The following Ex commands are supported by Vi: ~
 
-TODO
+The following Ex commands are supported by Vi: ~
 
-`:set`		but not `:set inv{option}`, `:set option&`, `:set all&`,
-		`:set option+=value`,
-		`:set option^=value`
-		`:set option-=value`
-		`:set option<`
+`:abbreviate`	enter abbreviation
+`:append`	append text
+`:args`		print the argument list
+`:cd`		change directory; Vi: no "cd -"
+`:change`	replace a line or series of lines
+`:chdir`	change directory
+`:copy`		copy lines
+`:delete`	delete lines
+`:edit`		edit a file
+`:exit`		same as ":xit"
+`:file`		show or set the current file name; Vi: without the column number
+`:global`	execute commands for matching lines
+`:insert`	insert text
+`:join`		join lines; Vi: not :join!
+`:k`		set a mark
+`:list`		print lines
+`:map` 		show or enter a mapping
+`:mark`		set a mark
+`:move`		move lines
+`:Next`		go to previous file in the argument list; no count or ++opt
+`:next`		go to next file in the argument list; no count or ++opt
+`:number`	print lines with line number
+`:open`		start open mode (not implemented in Vim)
+`:pop`		jump to older entry in tag stack (only in some versions)
+`:preserve`	write all text to swap file
+`:print`	print lines
+`:put`		insert contents of register in the text
+`:quit`		quit Vi
+`:read`		read file into the text
+`:recover`	recover a file from a swap file
+`:rewind` 	go to the first file in the argument list; no ++opt
+`:set`		set option; but not `:set inv{option}`, `:set option&`,
+		`:set all&`, `:set option+=value`, `:set option^=value`
+		`:set option-=value` `:set option<`
+`:shell`	escape to a shell
+`:source`	read Vim or Ex commands from a file
+`:stop`		suspend the editor or escape to a shell
+`:substitute`	find and replace text; Vi: no '&', 'i', 's', 'r' or 'I' flag,
+		confirm prompt only supports 'y' and 'n', no highlighting
+`:suspend`	same as ":stop"
+`:t`		same as ":copy"
+`:tag`		jump to tag
+`:unabbreviate`	remove abbreviation
+`:undo`		undo last change {Vi: only one level}
+`:unmap`	remove mapping
+`:vglobal`	execute commands for not matching lines
+`:version`	print version number and other info
+`:visual`	same as ":edit", but turns off "Ex" mode
+`:wq`		write to a file and quit Vi
+`:write`	write to a file
+`:xit`		write if buffer changed and quit Vi
+`:yank`		yank lines into a register
+`:z`		print some lines {not in all versions of Vi}
+`:!` 		filter lines or execute an external command
+`:"`		comment
+`:#`		same as ":number"
+`:*`		execute contents of a register
+`:&`		repeat last ":substitute"
+`:<`		shift lines one 'shiftwidth' left
+`:=`		print the cursor line number
+`:>`		shift lines one 'shiftwidth' right
+`:@`		execute contents of a register; but not `:@`; `:@@` only in
+		some versions
 
 
 The following Normal mode commands are supported by Vi: ~
 
-TODO
+|CTRL-B|	scroll N screens Backwards
+|CTRL-C|	interrupt current (search) command
+|CTRL-D|	scroll Down N lines (default: half a screen); Vim scrolls
+		'scroll' screen lines, Vi scrolls file lines; makes a
+		difference when lines wrap
+|CTRL-E|	scroll N lines upwards (N lines Extra)
+|CTRL-F|	scroll N screens Forward
+|CTRL-G|	display current file name and position
+|<BS>|		same as "h"
+|CTRL-H|	same as "h"
+|<NL>|		same as "j"
+|CTRL-J|	same as "j"
+|CTRL-L|	redraw screen
+|<CR>|		cursor to the first CHAR N lines lower
+|CTRL-M|	same as <CR>
+|CTRL-N|	same as "j"
+|CTRL-P|	same as "k"
+|CTRL-R|	in some Vi versions: same as CTRL-L
+|CTRL-T|	jump to N older Tag in tag list
+|CTRL-U|	N lines Upwards (default: half a screen)
+|CTRL-Y|	scroll N lines downwards
+|CTRL-Z|	suspend program (or start new shell)
+|CTRL-]|	:ta to ident under cursor
+|CTRL-^|	edit alternate file; Vi: no count
+|<Space>|	same as "l"
+|!|		filter Nmove text through the {filter} command
+|!!|		filter N lines through the {filter} command
+"		use register {a-zA-Z0-9.%#:-"} for next delete, yank or put
+		(uppercase to append) ({.%#:} only work with put)
+|$|		cursor to the end of Nth next line
+|%|		find the next (curly/square) bracket on this line and go to
+		its match, or go to matching comment bracket, or go to
+		matching preprocessor directive (Vi: no count supported)
+|&|		repeat last :s
+|'|		jump to mark (Vi: only lowercase marks)
+|(|		cursor N sentences backward
+|)|		cursor N sentences forward
+|+|		same as <CR>
+|,|		repeat latest f, t, F or T in opposite direction N times
+|-|		cursor to the first CHAR N lines higher
+|.|		repeat last change with count replaced with N
+|/|		search forward for the Nth occurrence of {pattern}
+|0|		cursor to the first char of the line
+|:|		start entering an Ex command
+|;|		repeat latest f, t, F or T N times
+|<|		shift Nmove lines one 'shiftwidth' leftwards
+|<<|		shift N lines one 'shiftwidth' leftwards
+|=|		filter Nmove lines through "indent"
+|==|		filter N lines through "indent"
+|>|		shift Nmove lines one 'shiftwidth' rightwards
+|>>|		shift N lines one 'shiftwidth' rightwards
+|?|		search backward for the Nth previous occurrence of {pattern}
+|@|		execute the contents of register {a-z} N times
+|@@|		repeat the previous @{a-z} N times
+|A|		append text after the end of the line N times
+|B|		cursor N WORDS backward
+|C|		change from the cursor position to the end of the line
+|D|		delete the characters under the cursor until the end of the
+		line and N-1 more lines [into register x]; synonym for "d$"
+|E|		cursor forward to the end of WORD N
+|F|		cursor to the Nth occurrence of {char} to the left
+|G|		cursor to line N, default last line
+|H|		cursor to line N from top of screen
+|I|		insert text before the first CHAR on the line N times
+|J|		Join N lines; default is 2
+|L|		cursor to line N from bottom of screen
+|M|		cursor to middle line of screen
+|N|		repeat the latest '/' or '?' N times in opposite direction
+|O|		begin a new line above the cursor and insert text, repeat N
+		times
+|P|		put the text [from register x] before the cursor N times
+|Q|		switch to "Ex" mode
+|R|		enter replace mode: overtype existing characters, repeat the
+		entered text N-1 times
+|S|		delete N lines [into register x] and start insert; synonym for
+		"cc".
+|T|		cursor till after Nth occurrence of {char} to the left
+|U|		undo all latest changes on one line
+|W|		cursor N WORDS forward
+|X|		delete N characters before the cursor [into register x]
+|Y|		yank N lines [into register x]; synonym for "yy"
+|ZZ|		store current file if modified, and exit
+|[[|		cursor N sections backward
+|]]|		cursor N sections forward
+|^|		cursor to the first CHAR of the line
+|_|		cursor to the first CHAR N - 1 lines lower
+|`|		cursor to the mark {a-zA-Z0-9}
+|a|		append text after the cursor N times
+|b|		cursor N words backward
+|c|		delete Nmove text [into register x] and start insert
+|cc|		delete N lines [into register x] and start insert
+|d|		delete Nmove text [into register x]
+|dd|		delete N lines [into register x]
+|e|		cursor forward to the end of word N
+|f|		cursor to Nth occurrence of {char} to the right
+|h|		cursor N chars to the left
+|i|		insert text before the cursor N times
+|j|		cursor N lines downward
+|k|		cursor N lines upward
+|l|		cursor N chars to the right
+|m|		set mark {A-Za-z} at cursor position
+|n|		repeat the latest '/' or '?' N times
+|o|		begin a new line below the cursor and insert text
+|p|		put the text [from register x] after the cursor N times
+|r|		replace N chars with {char}
+|s|		(substitute) delete N characters [into register x] and start
+		insert
+|t|		cursor till before Nth occurrence of {char} to the right
+|u|		undo changes {Vi: only one level}
+|w|		cursor N words forward
+|x|		delete N characters under and after the cursor [into register
+		x]
+|y|		yank Nmove text [into register x]
+|yy|		yank N lines [into register x]
+|z<CR>|		current line to the top
+|z-|		current line to the bottom
+|z+|		cursor on line N
+|z^|		cursor on line N
+|{|		cursor N paragraphs backward
+|		cursor to column N
+|}|		cursor N paragraphs forward
+|~|		switch case of N characters under the cursor; Vim: depends on
+		'tildeop'
+|<Del>|		same as "x"
+
+
+The following commands are supported in Insert mode by Vi: ~
+
+CTRL-@		insert previously inserted text and stop insert
+CTRL-C		quit insert mode, without checking for abbreviation, unless
+		'insertmode' set.
+CTRL-D		delete one shiftwidth of indent in the current line
+<BS>		delete character before the cursor
+CTRL-H		same as <BS>
+<Tab>		insert a <Tab> character
+CTRL-I		same as <Tab>
+<NL>		same as <CR>
+CTRL-J		same as <CR>
+<CR>		begin new line
+CTRL-M		same as <CR>
+CTRL-T		insert one shiftwidth of indent in current line
+CTRL-V {char}	insert next non-digit literally
+CTRL-W		delete word before the cursor
+CTRL-Z		when 'insertmode' set: suspend Vim
+<Esc>		end insert mode (unless 'insertmode' set)
+CTRL-[		same as <Esc>
+0 CTRL-D	delete all indent in the current line
+^ CTRL-D	delete all indent in the current line, restore it in the next
+		line
+<Del>		delete character under the cursor
 
 
 The following options are supported by Vi: ~
 
 'autoindent'	  'ai'	    take indent for new line from previous line
@@ -847,15 +1069,18 @@ The following options are supported by Vi: ~
 'tagstack'	  'tgst'    push tags onto the tag stack {not in all versions
 				of Vi}
 'term'			    name of the terminal
 'terse'			    shorten some messages
 'timeout'	  'to'	    time out on mappings and key codes
+'timeoutlen'	  'tm'	    time for 'timeout' {only in some Vi versions}
 'ttytype'	  'tty'     alias for 'term'
 'verbose'	  'vbs'     give informative messages {only in some Vi
 				versions as a boolean option}
 'warn'			    warn for shell command when buffer was changed
 'window'	  'wi'	    nr of lines to scroll for CTRL-F and CTRL-B
+			    {Vi also uses the option to specify the number of
+			    displayed lines}
 'wrapmargin'	  'wm'	    chars from the right where wrapping starts
 'wrapscan'	  'ws'	    searches wrap around the end of the file
 'writeany'	  'wa'	    write to file with no need for "!" override
 
 Also see |missing-options|.
@@ -966,11 +1191,12 @@ Only Vim is able to accept options in between and after the file names.
 -H		Vim: start Hebrew mode (when compiled with it).
 
 -i		Elvis: Start each window in Insert mode.
 -i {viminfo}	Vim: Use {viminfo} for viminfo file.
 
--L		Vim: Same as "-r" (also in some versions of Vi).
+-L		Vim: Same as "-r" {only in some versions of Vi: "List
+		recoverable edit sessions"}.
 
 -l		Nvi, Vi, Vim: Set 'lisp' and 'showmatch' options.
 
 -m		Vim: Modifications not allowed to be written, resets 'write'
 		option.
diff --git a/runtime/doc/visual.txt b/runtime/doc/visual.txt
index f63a08d04..b953dcbf1 100644
--- a/runtime/doc/visual.txt
+++ b/runtime/doc/visual.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -18,12 +18,10 @@ This is introduced in section |04.4| of the user manual.
 5. Blockwise operators			|blockwise-operators|
 6. Repeating				|visual-repeat|
 7. Examples				|visual-examples|
 8. Select mode				|Select-mode|
 
-{Vi has no Visual mode, the name "visual" is used for Normal mode, to
-distinguish it from Ex mode}
 {Since Vim 7.4.200 the |+visual| feature is always included}
 
 ==============================================================================
 1. Using Visual mode					*visual-use*
 
diff --git a/runtime/doc/windows.txt b/runtime/doc/windows.txt
index 0b9611504..9a682e59e 100644
--- a/runtime/doc/windows.txt
+++ b/runtime/doc/windows.txt

 
 
 		  VIM REFERENCE MANUAL    by Bram Moolenaar
 
 
@@ -24,11 +24,10 @@ The basics are explained in chapter 7 and 8 of the user manual |usr_07.txt|
 9.  Tag or file name under the cursor		|window-tag|
 10. The preview window				|preview-window|
 11. Using hidden buffers			|buffer-hidden|
 12. Special kinds of buffers			|special-buffers|
 
-{Vi does not have any of these commands}
 {not able to use multiple windows when the |+windows| feature was disabled at
 compile time}
 {not able to use vertically split windows when the |+vertsplit| feature was
 disabled at compile time}
 
@@ -735,11 +734,11 @@ can also get to them with the buffer list commands, like ":bnext".
 			windows will not be visited.
 			The last window (or where an error occurred) becomes
 			the current window.
 			{cmd} can contain '|' to concatenate several commands.
 			{cmd} must not open or close windows or reorder them.
-			{not in Vi}
+
 			Also see |:tabdo|, |:argdo|, |:bufdo|, |:cdo|, |:ldo|,
 			|:cfdo| and |:lfdo|
 
 							*:bufdo*
 :[range]bufdo[!] {cmd}	Execute {cmd} in each buffer in the buffer list or if
@@ -763,11 +762,11 @@ can also get to them with the buffer list commands, like ":bnext".
 			buffer list.
 			Note: While this command is executing, the Syntax
 			autocommand event is disabled by adding it to
 			'eventignore'.  This considerably speeds up editing
 			each buffer.
-			{not in Vi}
+
 			Also see |:tabdo|, |:argdo|, |:windo|, |:cdo|, |:ldo|,
 			|:cfdo| and |:lfdo|
 
 Examples: >
 
@@ -889,11 +888,11 @@ CTRL-W CTRL-Z					*CTRL-W_CTRL-Z* *:pc* *:pclose*
 		cannot be closed.  See also |:close|.
 
 							*:pp* *:ppop*
 :[count]pp[op][!]
 		Does ":[count]pop[!]" in the preview window.  See |:pop| and
-		|:ptag|.  {not in Vi}
+		|:ptag|.
 
 CTRL-W }						*CTRL-W_}*
 		Use identifier under cursor as a tag and perform a :ptag on
 		it.  Make the new Preview window (if required) N high.  If N is
 		not given, 'previewheight' is used.
/
